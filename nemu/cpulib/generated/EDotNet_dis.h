  // Don't edit this file, it is machine generated
  switch(topcode) {
      case 0x0:   dis_generic(loc,opcode);  break;  // nop
      case 0x1:   dis_generic(loc,opcode);  break;  // break
      case 0x2:   dis_generic(loc,opcode);  break;  // ldarg.0
      case 0x3:   dis_generic(loc,opcode);  break;  // ldarg.1
      case 0x4:   dis_generic(loc,opcode);  break;  // ldarg.2
      case 0x5:   dis_generic(loc,opcode);  break;  // ldarg.3
      case 0x6:   dis_generic(loc,opcode);  break;  // ldloc.0
      case 0x7:   dis_generic(loc,opcode);  break;  // ldloc.1
      case 0x8:   dis_generic(loc,opcode);  break;  // ldloc.2
      case 0x9:   dis_generic(loc,opcode);  break;  // ldloc.3
      case 0x0A:   dis_generic(loc,opcode);  break;  // stloc.0
      case 0x0B:   dis_generic(loc,opcode);  break;  // stloc.1
      case 0x0C:   dis_generic(loc,opcode);  break;  // stloc.2
      case 0x0D:   dis_generic(loc,opcode);  break;  // stloc.3
      case 0x0E:   dis_generic(loc,opcode);  break;  // ldarg.s
      case 0x0F:   dis_generic(loc,opcode);  break;  // ldarga.s
      case 0x10:   dis_generic(loc,opcode);  break;  // starg.s
      case 0x11:   dis_generic(loc,opcode);  break;  // ldloc.s
      case 0x12:   dis_generic(loc,opcode);  break;  // ldloca.s
      case 0x13:   dis_generic(loc,opcode);  break;  // stloc.s
      case 0x14:   dis_generic(loc,opcode);  break;  // ldnull
      case 0x15:   dis_generic(loc,opcode);  break;  // ldc.i4.m1
      case 0x16:   dis_generic(loc,opcode);  break;  // ldc.i4.0
      case 0x17:   dis_generic(loc,opcode);  break;  // ldc.i4.1
      case 0x18:   dis_generic(loc,opcode);  break;  // ldc.i4.2
      case 0x19:   dis_generic(loc,opcode);  break;  // ldc.i4.3
      case 0x1A:   dis_generic(loc,opcode);  break;  // ldc.i4.4
      case 0x1B:   dis_generic(loc,opcode);  break;  // ldc.i4.5
      case 0x1C:   dis_generic(loc,opcode);  break;  // ldc.i4.6
      case 0x1D:   dis_generic(loc,opcode);  break;  // ldc.i4.7
      case 0x1E:   dis_generic(loc,opcode);  break;  // ldc.i4.8
      case 0x1F:   dis_generic(loc,opcode);  break;  // ldc.i4.s
      case 0x20:   dis_generic(loc,opcode);  break;  // ldc.i4
      case 0x21:   dis_generic(loc,opcode);  break;  // ldc.i8
      case 0x22:   dis_generic(loc,opcode);  break;  // ldc.r4
      case 0x23:   dis_generic(loc,opcode);  break;  // ldc.r8
      case 0x24:   dis_generic(loc,opcode);  break;  // illegal
      case 0x25:   dis_generic(loc,opcode);  break;  // dup
      case 0x26:   dis_generic(loc,opcode);  break;  // pop
      case 0x27:   dis_generic(loc,opcode);  break;  // jmp
      case 0x28:   dis_generic(loc,opcode);  break;  // call
      case 0x29:   dis_generic(loc,opcode);  break;  // calli
      case 0x2A:   dis_generic(loc,opcode);  break;  // ret
      case 0x2B:   dis_generic(loc,opcode);  break;  // br.s
      case 0x2C:   dis_generic(loc,opcode);  break;  // brfalse.s
      case 0x2D:   dis_generic(loc,opcode);  break;  // brtrue.s
      case 0x2E:   dis_generic(loc,opcode);  break;  // beq.s
      case 0x2F:   dis_generic(loc,opcode);  break;  // bge.s
      case 0x30:   dis_generic(loc,opcode);  break;  // bgt.s
      case 0x31:   dis_generic(loc,opcode);  break;  // ble.s
      case 0x32:   dis_generic(loc,opcode);  break;  // blt.s
      case 0x33:   dis_generic(loc,opcode);  break;  // bne.un.s
      case 0x34:   dis_generic(loc,opcode);  break;  // bge.un.s
      case 0x35:   dis_generic(loc,opcode);  break;  // bgt.un.s
      case 0x36:   dis_generic(loc,opcode);  break;  // ble.un.s
      case 0x37:   dis_generic(loc,opcode);  break;  // blt.un.s
      case 0x38:   dis_generic(loc,opcode);  break;  // br
      case 0x39:   dis_generic(loc,opcode);  break;  // brfalse
      case 0x3A:   dis_generic(loc,opcode);  break;  // brtrue
      case 0x3B:   dis_generic(loc,opcode);  break;  // beq
      case 0x3C:   dis_generic(loc,opcode);  break;  // bge
      case 0x3D:   dis_generic(loc,opcode);  break;  // bgt
      case 0x3E:   dis_generic(loc,opcode);  break;  // ble
      case 0x3F:   dis_generic(loc,opcode);  break;  // blt
      case 0x40:   dis_generic(loc,opcode);  break;  // bne.un
      case 0x41:   dis_generic(loc,opcode);  break;  // bge.un
      case 0x42:   dis_generic(loc,opcode);  break;  // bgt.un
      case 0x43:   dis_generic(loc,opcode);  break;  // ble.un
      case 0x44:   dis_generic(loc,opcode);  break;  // blt.un
      case 0x45:   dis_generic(loc,opcode);  break;  // switch
      case 0x46:   dis_generic(loc,opcode);  break;  // ldind.i1
      case 0x47:   dis_generic(loc,opcode);  break;  // ldind.u1
      case 0x48:   dis_generic(loc,opcode);  break;  // ldind.i2
      case 0x49:   dis_generic(loc,opcode);  break;  // ldind.u2
      case 0x4A:   dis_generic(loc,opcode);  break;  // ldind.i4
      case 0x4B:   dis_generic(loc,opcode);  break;  // ldind.u4
      case 0x4C:   dis_generic(loc,opcode);  break;  // ldind.i8
      case 0x4D:   dis_generic(loc,opcode);  break;  // ldind.i
      case 0x4E:   dis_generic(loc,opcode);  break;  // ldind.r4
      case 0x4F:   dis_generic(loc,opcode);  break;  // ldind.r8
      case 0x50:   dis_generic(loc,opcode);  break;  // ldind.ref
      case 0x51:   dis_generic(loc,opcode);  break;  // stind.ref
      case 0x52:   dis_generic(loc,opcode);  break;  // stind.i1
      case 0x53:   dis_generic(loc,opcode);  break;  // stind.i2
      case 0x54:   dis_generic(loc,opcode);  break;  // stind.i4
      case 0x55:   dis_generic(loc,opcode);  break;  // stind.i8
      case 0x56:   dis_generic(loc,opcode);  break;  // stind.r4
      case 0x57:   dis_generic(loc,opcode);  break;  // stind.r8
      case 0x58:   dis_generic(loc,opcode);  break;  // add
      case 0x59:   dis_generic(loc,opcode);  break;  // sub
      case 0x5A:   dis_generic(loc,opcode);  break;  // mul
      case 0x5B:   dis_generic(loc,opcode);  break;  // div
      case 0x5C:   dis_generic(loc,opcode);  break;  // div.un
      case 0x5D:   dis_generic(loc,opcode);  break;  // rem
      case 0x5E:   dis_generic(loc,opcode);  break;  // rem.un
      case 0x5F:   dis_generic(loc,opcode);  break;  // and
      case 0x60:   dis_generic(loc,opcode);  break;  // or
      case 0x61:   dis_generic(loc,opcode);  break;  // xor
      case 0x62:   dis_generic(loc,opcode);  break;  // shl
      case 0x63:   dis_generic(loc,opcode);  break;  // shr
      case 0x64:   dis_generic(loc,opcode);  break;  // shr.un
      case 0x65:   dis_generic(loc,opcode);  break;  // neg
      case 0x66:   dis_generic(loc,opcode);  break;  // not
      case 0x67:   dis_generic(loc,opcode);  break;  // conv.i1
      case 0x68:   dis_generic(loc,opcode);  break;  // conv.i2
      case 0x69:   dis_generic(loc,opcode);  break;  // conv.i4
      case 0x6A:   dis_generic(loc,opcode);  break;  // conv.i8
      case 0x6B:   dis_generic(loc,opcode);  break;  // conv.r4
      case 0x6C:   dis_generic(loc,opcode);  break;  // conv.r8
      case 0x6D:   dis_generic(loc,opcode);  break;  // conv.u4
      case 0x6E:   dis_generic(loc,opcode);  break;  // conv.u8
      case 0x6F:   dis_generic(loc,opcode);  break;  // callvirt
      case 0x70:   dis_generic(loc,opcode);  break;  // cpobj
      case 0x71:   dis_generic(loc,opcode);  break;  // ldobj
      case 0x72:   dis_generic(loc,opcode);  break;  // ldstr
      case 0x73:   dis_generic(loc,opcode);  break;  // newobj
      case 0x74:   dis_generic(loc,opcode);  break;  // castclass
      case 0x75:   dis_generic(loc,opcode);  break;  // isinst
      case 0x76:   dis_generic(loc,opcode);  break;  // conv.r.un
      case 0x77:   dis_generic(loc,opcode);  break;  // illegal
      case 0x78:   dis_generic(loc,opcode);  break;  // illegal
      case 0x79:   dis_generic(loc,opcode);  break;  // unbox
      case 0x7A:   dis_generic(loc,opcode);  break;  // throw
      case 0x7B:   dis_generic(loc,opcode);  break;  // ldfld
      case 0x7C:   dis_generic(loc,opcode);  break;  // ldflda
      case 0x7D:   dis_generic(loc,opcode);  break;  // stfld
      case 0x7E:   dis_generic(loc,opcode);  break;  // ldsfld
      case 0x7F:   dis_generic(loc,opcode);  break;  // ldsflda
      case 0x80:   dis_generic(loc,opcode);  break;  // stsfld
      case 0x81:   dis_generic(loc,opcode);  break;  // stobj
      case 0x82:   dis_generic(loc,opcode);  break;  // conv.ovf.i1.un
      case 0x83:   dis_generic(loc,opcode);  break;  // conv.ovf.i2.un
      case 0x84:   dis_generic(loc,opcode);  break;  // conv.ovf.i4.un
      case 0x85:   dis_generic(loc,opcode);  break;  // conv.ovf.i8.un
      case 0x86:   dis_generic(loc,opcode);  break;  // conv.ovf.u1.un
      case 0x87:   dis_generic(loc,opcode);  break;  // conv.ovf.u2.un
      case 0x88:   dis_generic(loc,opcode);  break;  // conv.ovf.u4.un
      case 0x89:   dis_generic(loc,opcode);  break;  // conv.ovf.u8.un
      case 0x8A:   dis_generic(loc,opcode);  break;  // conv.ovf.i.un
      case 0x8B:   dis_generic(loc,opcode);  break;  // conv.ovf.u.un
      case 0x8C:   dis_generic(loc,opcode);  break;  // box
      case 0x8D:   dis_generic(loc,opcode);  break;  // newarr
      case 0x8E:   dis_generic(loc,opcode);  break;  // ldlen
      case 0x8F:   dis_generic(loc,opcode);  break;  // ldelema
      case 0x90:   dis_generic(loc,opcode);  break;  // ldelem.i1
      case 0x91:   dis_generic(loc,opcode);  break;  // ldelem.u1
      case 0x92:   dis_generic(loc,opcode);  break;  // ldelem.i2
      case 0x93:   dis_generic(loc,opcode);  break;  // ldelem.u2
      case 0x94:   dis_generic(loc,opcode);  break;  // ldelem.i4
      case 0x95:   dis_generic(loc,opcode);  break;  // ldelem.u4
      case 0x96:   dis_generic(loc,opcode);  break;  // ldelem.i8
      case 0x97:   dis_generic(loc,opcode);  break;  // ldelem.i
      case 0x98:   dis_generic(loc,opcode);  break;  // ldelem.r4
      case 0x99:   dis_generic(loc,opcode);  break;  // ldelem.r8
      case 0x9A:   dis_generic(loc,opcode);  break;  // ldelem.ref
      case 0x9B:   dis_generic(loc,opcode);  break;  // stelem.i
      case 0x9C:   dis_generic(loc,opcode);  break;  // stelem.i1
      case 0x9D:   dis_generic(loc,opcode);  break;  // stelem.i2
      case 0x9E:   dis_generic(loc,opcode);  break;  // stelem.i4
      case 0x9F:   dis_generic(loc,opcode);  break;  // stelem.i8
      case 0xA0:   dis_generic(loc,opcode);  break;  // stelem.r4
      case 0xA1:   dis_generic(loc,opcode);  break;  // stelem.r8
      case 0xA2:   dis_generic(loc,opcode);  break;  // stelem.ref
      case 0xA3:   dis_generic(loc,opcode);  break;  // illegal
      case 0xA4:   dis_generic(loc,opcode);  break;  // illegal
      case 0xA5:   dis_generic(loc,opcode);  break;  // illegal
      case 0xA6:   dis_generic(loc,opcode);  break;  // illegal
      case 0xA7:   dis_generic(loc,opcode);  break;  // illegal
      case 0xA8:   dis_generic(loc,opcode);  break;  // illegal
      case 0xA9:   dis_generic(loc,opcode);  break;  // illegal
      case 0xAA:   dis_generic(loc,opcode);  break;  // illegal
      case 0xAB:   dis_generic(loc,opcode);  break;  // illegal
      case 0xAC:   dis_generic(loc,opcode);  break;  // illegal
      case 0xAD:   dis_generic(loc,opcode);  break;  // illegal
      case 0xAE:   dis_generic(loc,opcode);  break;  // illegal
      case 0xAF:   dis_generic(loc,opcode);  break;  // illegal
      case 0xB0:   dis_generic(loc,opcode);  break;  // illegal
      case 0xB1:   dis_generic(loc,opcode);  break;  // illegal
      case 0xB2:   dis_generic(loc,opcode);  break;  // illegal
      case 0xB3:   dis_generic(loc,opcode);  break;  // conv.ovf.i1
      case 0xB4:   dis_generic(loc,opcode);  break;  // conv.ovf.u1
      case 0xB5:   dis_generic(loc,opcode);  break;  // conv.ovf.i2
      case 0xB6:   dis_generic(loc,opcode);  break;  // conv.ovf.u2
      case 0xB7:   dis_generic(loc,opcode);  break;  // conv.ovf.i4
      case 0xB8:   dis_generic(loc,opcode);  break;  // conv.ovf.u4
      case 0xB9:   dis_generic(loc,opcode);  break;  // conv.ovf.i8
      case 0xBA:   dis_generic(loc,opcode);  break;  // conv.ovf.u8
      case 0xBB:   dis_generic(loc,opcode);  break;  // illegal
      case 0xBC:   dis_generic(loc,opcode);  break;  // illegal
      case 0xBD:   dis_generic(loc,opcode);  break;  // illegal
      case 0xBE:   dis_generic(loc,opcode);  break;  // illegal
      case 0xBF:   dis_generic(loc,opcode);  break;  // illegal
      case 0xC0:   dis_generic(loc,opcode);  break;  // illegal
      case 0xC1:   dis_generic(loc,opcode);  break;  // illegal
      case 0xC2:   dis_generic(loc,opcode);  break;  // refanyval
      case 0xC3:   dis_generic(loc,opcode);  break;  // ckfinite
      case 0xC4:   dis_generic(loc,opcode);  break;  // illegal
      case 0xC5:   dis_generic(loc,opcode);  break;  // illegal
      case 0xC6:   dis_generic(loc,opcode);  break;  // mkrefany
      case 0xC7:   dis_generic(loc,opcode);  break;  // illegal
      case 0xC8:   dis_generic(loc,opcode);  break;  // illegal
      case 0xC9:   dis_generic(loc,opcode);  break;  // illegal
      case 0xCA:   dis_generic(loc,opcode);  break;  // illegal
      case 0xCB:   dis_generic(loc,opcode);  break;  // illegal
      case 0xCC:   dis_generic(loc,opcode);  break;  // illegal
      case 0xCD:   dis_generic(loc,opcode);  break;  // illegal
      case 0xCE:   dis_generic(loc,opcode);  break;  // illegal
      case 0xCF:   dis_generic(loc,opcode);  break;  // illegal
      case 0xD0:   dis_generic(loc,opcode);  break;  // ldtoken
      case 0xD1:   dis_generic(loc,opcode);  break;  // conv.u2
      case 0xD2:   dis_generic(loc,opcode);  break;  // conv.u1
      case 0xD3:   dis_generic(loc,opcode);  break;  // conv.i
      case 0xD4:   dis_generic(loc,opcode);  break;  // conv.ovf.i
      case 0xD5:   dis_generic(loc,opcode);  break;  // conv.ovf.u
      case 0xD6:   dis_generic(loc,opcode);  break;  // add.ovf
      case 0xD7:   dis_generic(loc,opcode);  break;  // add.ovf.un
      case 0xD8:   dis_generic(loc,opcode);  break;  // mul.ovf
      case 0xD9:   dis_generic(loc,opcode);  break;  // mul.ovf.un
      case 0xDA:   dis_generic(loc,opcode);  break;  // sub.ovf
      case 0xDB:   dis_generic(loc,opcode);  break;  // sub.ovf.un
      case 0xDC:   dis_generic(loc,opcode);  break;  // endfinally
      case 0xDD:   dis_generic(loc,opcode);  break;  // leave
      case 0xDE:   dis_generic(loc,opcode);  break;  // leave.s
      case 0xDF:   dis_generic(loc,opcode);  break;  // stind.i
      case 0xE0:   dis_generic(loc,opcode);  break;  // conv.u
      case 0xE1:   dis_generic(loc,opcode);  break;  // illegal
      case 0xE2:   dis_generic(loc,opcode);  break;  // illegal
      case 0xE3:   dis_generic(loc,opcode);  break;  // illegal
      case 0xE4:   dis_generic(loc,opcode);  break;  // illegal
      case 0xE5:   dis_generic(loc,opcode);  break;  // illegal
      case 0xE6:   dis_generic(loc,opcode);  break;  // illegal
      case 0xE7:   dis_generic(loc,opcode);  break;  // illegal
      case 0xE8:   dis_generic(loc,opcode);  break;  // illegal
      case 0xE9:   dis_generic(loc,opcode);  break;  // illegal
      case 0xEA:   dis_generic(loc,opcode);  break;  // illegal
      case 0xEB:   dis_generic(loc,opcode);  break;  // illegal
      case 0xEC:   dis_generic(loc,opcode);  break;  // illegal
      case 0xED:   dis_generic(loc,opcode);  break;  // illegal
      case 0xEE:   dis_generic(loc,opcode);  break;  // illegal
      case 0xEF:   dis_generic(loc,opcode);  break;  // illegal
      case 0xF0:   dis_generic(loc,opcode);  break;  // illegal
      case 0xF1:   dis_generic(loc,opcode);  break;  // illegal
      case 0xF2:   dis_generic(loc,opcode);  break;  // illegal
      case 0xF3:   dis_generic(loc,opcode);  break;  // illegal
      case 0xF4:   dis_generic(loc,opcode);  break;  // illegal
      case 0xF5:   dis_generic(loc,opcode);  break;  // illegal
      case 0xF6:   dis_generic(loc,opcode);  break;  // illegal
      case 0xF7:   dis_generic(loc,opcode);  break;  // illegal
      case 0xF8:   dis_generic(loc,opcode);  break;  // illegal
      case 0xF9:   dis_generic(loc,opcode);  break;  // illegal
      case 0xFA:   dis_generic(loc,opcode);  break;  // illegal
      case 0xFB:   dis_generic(loc,opcode);  break;  // illegal
      case 0xFC:   dis_generic(loc,opcode);  break;  // illegal
      case 0xFD:   dis_generic(loc,opcode);  break;  // illegal
      case 0xFE:   dis_generic(loc,opcode);  break;  // special
      case 0xFF:   dis_generic(loc,opcode);  break;  // illegal
      default:  dis_invalid("EDotNet_dis.h"); break;
  }
