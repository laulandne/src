  // Don't edit this file, it is machine generated
  switch(topcode) {
      case 0x0:   dis_add(loc,opcode);  break;  // add
      case 0x1:   dis_add(loc,opcode);  break;  // add
      case 0x2:   dis_add(loc,opcode);  break;  // add
      case 0x3:   dis_add(loc,opcode);  break;  // add
      case 0x4:   dis_add(loc,opcode);  break;  // add
      case 0x5:   dis_add(loc,opcode);  break;  // add
      case 0x6:   dis_push(loc,opcode);  break;  // push
      case 0x7:   dis_pop(loc,opcode);  break;  // pop
      case 0x8:   dis_or(loc,opcode);  break;  // or
      case 0x9:   dis_or(loc,opcode);  break;  // or
      case 0x0a:   dis_or(loc,opcode);  break;  // or
      case 0x0b:   dis_or(loc,opcode);  break;  // or
      case 0x0c:   dis_or(loc,opcode);  break;  // or
      case 0x0d:   dis_or(loc,opcode);  break;  // or
      case 0x0e:   dis_push(loc,opcode);  break;  // push
      case 0x0f:   dis_special(loc,opcode);  break;  // special
      case 0x10:   dis_adc(loc,opcode);  break;  // adc
      case 0x11:   dis_adc(loc,opcode);  break;  // adc
      case 0x12:   dis_adc(loc,opcode);  break;  // adc
      case 0x13:   dis_adc(loc,opcode);  break;  // adc
      case 0x14:   dis_adc(loc,opcode);  break;  // adc
      case 0x15:   dis_adc(loc,opcode);  break;  // adc
      case 0x16:   dis_push(loc,opcode);  break;  // push
      case 0x17:   dis_pop(loc,opcode);  break;  // pop
      case 0x18:   dis_sbb(loc,opcode);  break;  // sbb
      case 0x19:   dis_sbb(loc,opcode);  break;  // sbb
      case 0x1a:   dis_sbb(loc,opcode);  break;  // sbb
      case 0x1b:   dis_sbb(loc,opcode);  break;  // sbb
      case 0x1c:   dis_sbb(loc,opcode);  break;  // sbb
      case 0x1d:   dis_sbb(loc,opcode);  break;  // sbb
      case 0x1e:   dis_push(loc,opcode);  break;  // push
      case 0x1f:   dis_pop(loc,opcode);  break;  // pop
      case 0x20:   dis_and(loc,opcode);  break;  // and
      case 0x21:   dis_and(loc,opcode);  break;  // and
      case 0x22:   dis_and(loc,opcode);  break;  // and
      case 0x23:   dis_and(loc,opcode);  break;  // and
      case 0x24:   dis_and(loc,opcode);  break;  // and
      case 0x25:   dis_and(loc,opcode);  break;  // and
      case 0x26:   dis_es(loc,opcode);  break;  // es
      case 0x27:   dis_daa(loc,opcode);  break;  // daa
      case 0x28:   dis_sub(loc,opcode);  break;  // sub
      case 0x29:   dis_sub(loc,opcode);  break;  // sub
      case 0x2a:   dis_sub(loc,opcode);  break;  // sub
      case 0x2b:   dis_sub(loc,opcode);  break;  // sub
      case 0x2c:   dis_sub(loc,opcode);  break;  // sub
      case 0x2d:   dis_sub(loc,opcode);  break;  // sub
      case 0x2e:   dis_cs(loc,opcode);  break;  // cs
      case 0x2f:   dis_das(loc,opcode);  break;  // das
      case 0x30:   dis_xor(loc,opcode);  break;  // xor
      case 0x31:   dis_xor(loc,opcode);  break;  // xor
      case 0x32:   dis_xor(loc,opcode);  break;  // xor
      case 0x33:   dis_xor(loc,opcode);  break;  // xor
      case 0x34:   dis_xor(loc,opcode);  break;  // xor
      case 0x35:   dis_xor(loc,opcode);  break;  // xor
      case 0x36:   dis_ss(loc,opcode);  break;  // ss
      case 0x37:   dis_aaa(loc,opcode);  break;  // aaa
      case 0x38:   dis_cmp(loc,opcode);  break;  // cmp
      case 0x39:   dis_cmp(loc,opcode);  break;  // cmp
      case 0x3a:   dis_cmp(loc,opcode);  break;  // cmp
      case 0x3b:   dis_cmp(loc,opcode);  break;  // cmp
      case 0x3c:   dis_cmp(loc,opcode);  break;  // cmp
      case 0x3d:   dis_cmp(loc,opcode);  break;  // cmp
      case 0x3e:   dis_ds(loc,opcode);  break;  // ds
      case 0x3f:   dis_aas(loc,opcode);  break;  // aas
      case 0x40:   dis_inc(loc,opcode);  break;  // inc
      case 0x41:   dis_inc(loc,opcode);  break;  // inc
      case 0x42:   dis_inc(loc,opcode);  break;  // inc
      case 0x43:   dis_inc(loc,opcode);  break;  // inc
      case 0x44:   dis_inc(loc,opcode);  break;  // inc
      case 0x45:   dis_inc(loc,opcode);  break;  // inc
      case 0x46:   dis_inc(loc,opcode);  break;  // inc
      case 0x47:   dis_inc(loc,opcode);  break;  // inc
      case 0x48:   dis_special(loc,opcode);  break;  // special
      case 0x49:   dis_dec(loc,opcode);  break;  // dec
      case 0x4a:   dis_dec(loc,opcode);  break;  // dec
      case 0x4b:   dis_dec(loc,opcode);  break;  // dec
      case 0x4c:   dis_dec(loc,opcode);  break;  // dec
      case 0x4d:   dis_dec(loc,opcode);  break;  // dec
      case 0x4e:   dis_dec(loc,opcode);  break;  // dec
      case 0x4f:   dis_dec(loc,opcode);  break;  // dec
      case 0x50:   dis_push(loc,opcode);  break;  // push
      case 0x51:   dis_push(loc,opcode);  break;  // push
      case 0x52:   dis_push(loc,opcode);  break;  // push
      case 0x53:   dis_push(loc,opcode);  break;  // push
      case 0x54:   dis_push(loc,opcode);  break;  // push
      case 0x55:   dis_push(loc,opcode);  break;  // push
      case 0x56:   dis_push(loc,opcode);  break;  // push
      case 0x57:   dis_push(loc,opcode);  break;  // push
      case 0x58:   dis_pop(loc,opcode);  break;  // pop
      case 0x59:   dis_pop(loc,opcode);  break;  // pop
      case 0x5a:   dis_pop(loc,opcode);  break;  // pop
      case 0x5b:   dis_pop(loc,opcode);  break;  // pop
      case 0x5c:   dis_pop(loc,opcode);  break;  // pop
      case 0x5d:   dis_pop(loc,opcode);  break;  // pop
      case 0x5e:   dis_pop(loc,opcode);  break;  // pop
      case 0x5f:   dis_pop(loc,opcode);  break;  // pop
      case 0x60:   dis_pusha(loc,opcode);  break;  // pusha
      case 0x61:   dis_popa(loc,opcode);  break;  // popa
      case 0x62:   dis_bound(loc,opcode);  break;  // bound
      case 0x63:   dis_arpl(loc,opcode);  break;  // arpl
      case 0x64:   dis_fs(loc,opcode);  break;  // fs
      case 0x65:   dis_gs(loc,opcode);  break;  // gs
      case 0x66:   dis_op_size(loc,opcode);  break;  // op_size
      case 0x67:   dis_addr_size(loc,opcode);  break;  // addr_size
      case 0x68:   dis_push(loc,opcode);  break;  // push
      case 0x69:   dis_imul(loc,opcode);  break;  // imul
      case 0x6a:   dis_push(loc,opcode);  break;  // push
      case 0x6b:   dis_imul(loc,opcode);  break;  // imul
      case 0x6c:   dis_insb(loc,opcode);  break;  // insb
      case 0x6d:   dis_insw(loc,opcode);  break;  // insw
      case 0x6e:   dis_outsb(loc,opcode);  break;  // outsb
      case 0x6f:   dis_outsw(loc,opcode);  break;  // outsw
      case 0x70:   dis_jo(loc,opcode);  break;  // jo
      case 0x71:   dis_jno(loc,opcode);  break;  // jno
      case 0x72:   dis_jc(loc,opcode);  break;  // jc
      case 0x73:   dis_jnc(loc,opcode);  break;  // jnc
      case 0x74:   dis_jz(loc,opcode);  break;  // jz
      case 0x75:   dis_jnz(loc,opcode);  break;  // jnz
      case 0x76:   dis_jbe(loc,opcode);  break;  // jbe
      case 0x77:   dis_jnbe(loc,opcode);  break;  // jnbe
      case 0x78:   dis_js(loc,opcode);  break;  // js
      case 0x79:   dis_jns(loc,opcode);  break;  // jns
      case 0x7a:   dis_jpo(loc,opcode);  break;  // jpo
      case 0x7b:   dis_jpe(loc,opcode);  break;  // jpe
      case 0x7c:   dis_jnge(loc,opcode);  break;  // jnge
      case 0x7d:   dis_jge(loc,opcode);  break;  // jge
      case 0x7e:   dis_jng(loc,opcode);  break;  // jng
      case 0x7f:   dis_jg(loc,opcode);  break;  // jg
      case 0x80:   dis_special(loc,opcode);  break;  // special
      case 0x81:   dis_special(loc,opcode);  break;  // special
      case 0x82:   dis_illegal(loc,opcode);  break;  // illegal
      case 0x83:   dis_special(loc,opcode);  break;  // special
      case 0x84:   dis_test(loc,opcode);  break;  // test
      case 0x85:   dis_test(loc,opcode);  break;  // test
      case 0x86:   dis_xchg(loc,opcode);  break;  // xchg
      case 0x87:   dis_xchg(loc,opcode);  break;  // xchg
      case 0x88:   dis_mov(loc,opcode);  break;  // mov
      case 0x89:   dis_mov(loc,opcode);  break;  // mov
      case 0x8a:   dis_mov(loc,opcode);  break;  // mov
      case 0x8b:   dis_mov(loc,opcode);  break;  // mov
      case 0x8c:   dis_mov(loc,opcode);  break;  // mov
      case 0x8d:   dis_lea(loc,opcode);  break;  // lea
      case 0x8e:   dis_mov(loc,opcode);  break;  // mov
      case 0x8f:   dis_special(loc,opcode);  break;  // special
      case 0x90:   dis_xchg(loc,opcode);  break;  // xchg
      case 0x91:   dis_xchg(loc,opcode);  break;  // xchg
      case 0x92:   dis_xchg(loc,opcode);  break;  // xchg
      case 0x93:   dis_xchg(loc,opcode);  break;  // xchg
      case 0x94:   dis_xchg(loc,opcode);  break;  // xchg
      case 0x95:   dis_xchg(loc,opcode);  break;  // xchg
      case 0x96:   dis_xchg(loc,opcode);  break;  // xchg
      case 0x97:   dis_xchg(loc,opcode);  break;  // xchg
      case 0x98:   dis_cbw(loc,opcode);  break;  // cbw
      case 0x99:   dis_cwd(loc,opcode);  break;  // cwd
      case 0x9a:   dis_call(loc,opcode);  break;  // call
      case 0x9b:   dis_wait(loc,opcode);  break;  // wait
      case 0x9c:   dis_pushf(loc,opcode);  break;  // pushf
      case 0x9d:   dis_popf(loc,opcode);  break;  // popf
      case 0x9e:   dis_sahf(loc,opcode);  break;  // sahf
      case 0x9f:   dis_lahf(loc,opcode);  break;  // lahf
      case 0xa0:   dis_mov(loc,opcode);  break;  // mov
      case 0xa1:   dis_mov(loc,opcode);  break;  // mov
      case 0xa2:   dis_mov(loc,opcode);  break;  // mov
      case 0xa3:   dis_mov(loc,opcode);  break;  // mov
      case 0xa4:   dis_movsb(loc,opcode);  break;  // movsb
      case 0xa5:   dis_movsw(loc,opcode);  break;  // movsw
      case 0xa6:   dis_cmpsb(loc,opcode);  break;  // cmpsb
      case 0xa7:   dis_cmpsw(loc,opcode);  break;  // cmpsw
      case 0xa8:   dis_test(loc,opcode);  break;  // test
      case 0xa9:   dis_test(loc,opcode);  break;  // test
      case 0xaa:   dis_stosb(loc,opcode);  break;  // stosb
      case 0xab:   dis_stosw(loc,opcode);  break;  // stosw
      case 0xac:   dis_lodsb(loc,opcode);  break;  // lodsb
      case 0xad:   dis_lodsw(loc,opcode);  break;  // lodsw
      case 0xae:   dis_scasb(loc,opcode);  break;  // scasb
      case 0xaf:   dis_scasw(loc,opcode);  break;  // scasw
      case 0xb0:   dis_mov(loc,opcode);  break;  // mov
      case 0xb1:   dis_mov(loc,opcode);  break;  // mov
      case 0xb2:   dis_mov(loc,opcode);  break;  // mov
      case 0xb3:   dis_mov(loc,opcode);  break;  // mov
      case 0xb4:   dis_mov(loc,opcode);  break;  // mov
      case 0xb5:   dis_mov(loc,opcode);  break;  // mov
      case 0xb6:   dis_mov(loc,opcode);  break;  // mov
      case 0xb7:   dis_mov(loc,opcode);  break;  // mov
      case 0xb8:   dis_mov(loc,opcode);  break;  // mov
      case 0xb9:   dis_mov(loc,opcode);  break;  // mov
      case 0xba:   dis_mov(loc,opcode);  break;  // mov
      case 0xbb:   dis_mov(loc,opcode);  break;  // mov
      case 0xbc:   dis_mov(loc,opcode);  break;  // mov
      case 0xbd:   dis_mov(loc,opcode);  break;  // mov
      case 0xbe:   dis_mov(loc,opcode);  break;  // mov
      case 0xbf:   dis_mov(loc,opcode);  break;  // mov
      case 0xc0:   dis_special(loc,opcode);  break;  // special
      case 0xc1:   dis_special(loc,opcode);  break;  // special
      case 0xc2:   dis_ret(loc,opcode);  break;  // ret
      case 0xc3:   dis_ret(loc,opcode);  break;  // ret
      case 0xc4:   dis_les(loc,opcode);  break;  // les
      case 0xc5:   dis_lds(loc,opcode);  break;  // lds
      case 0xc6:   dis_special(loc,opcode);  break;  // special
      case 0xc7:   dis_special(loc,opcode);  break;  // special
      case 0xc8:   dis_enter(loc,opcode);  break;  // enter
      case 0xc9:   dis_leave(loc,opcode);  break;  // leave
      case 0xca:   dis_ret(loc,opcode);  break;  // ret
      case 0xcb:   dis_ret(loc,opcode);  break;  // ret
      case 0xcc:   dis_int(loc,opcode);  break;  // int
      case 0xcd:   dis_int(loc,opcode);  break;  // int
      case 0xce:   dis_into(loc,opcode);  break;  // into
      case 0xcf:   dis_iret(loc,opcode);  break;  // iret
      case 0xd0:   dis_special(loc,opcode);  break;  // special
      case 0xd1:   dis_special(loc,opcode);  break;  // special
      case 0xd2:   dis_special(loc,opcode);  break;  // special
      case 0xd3:   dis_special(loc,opcode);  break;  // special
      case 0xd4:   dis_special(loc,opcode);  break;  // special
      case 0xd5:   dis_special(loc,opcode);  break;  // special
      case 0xd6:   dis_illegal(loc,opcode);  break;  // illegal
      case 0xd7:   dis_xlat(loc,opcode);  break;  // xlat
      case 0xd8:   dis_illegal(loc,opcode);  break;  // illegal
      case 0xd9:   dis_illegal(loc,opcode);  break;  // illegal
      case 0xda:   dis_illegal(loc,opcode);  break;  // illegal
      case 0xdb:   dis_illegal(loc,opcode);  break;  // illegal
      case 0xdc:   dis_illegal(loc,opcode);  break;  // illegal
      case 0xdd:   dis_illegal(loc,opcode);  break;  // illegal
      case 0xde:   dis_illegal(loc,opcode);  break;  // illegal
      case 0xdf:   dis_illegal(loc,opcode);  break;  // illegal
      case 0xe0:   dis_loopnz(loc,opcode);  break;  // loopnz
      case 0xe1:   dis_loopz(loc,opcode);  break;  // loopz
      case 0xe2:   dis_loop(loc,opcode);  break;  // loop
      case 0xe3:   dis_jcxz(loc,opcode);  break;  // jcxz
      case 0xe4:   dis_in(loc,opcode);  break;  // in
      case 0xe5:   dis_in(loc,opcode);  break;  // in
      case 0xe6:   dis_out(loc,opcode);  break;  // out
      case 0xe7:   dis_out(loc,opcode);  break;  // out
      case 0xe8:   dis_call(loc,opcode);  break;  // call
      case 0xe9:   dis_jmp(loc,opcode);  break;  // jmp
      case 0xea:   dis_jmp(loc,opcode);  break;  // jmp
      case 0xeb:   dis_jmp(loc,opcode);  break;  // jmp
      case 0xec:   dis_in(loc,opcode);  break;  // in
      case 0xed:   dis_in(loc,opcode);  break;  // in
      case 0xee:   dis_out(loc,opcode);  break;  // out
      case 0xef:   dis_out(loc,opcode);  break;  // out
      case 0xf0:   dis_lock(loc,opcode);  break;  // lock
      case 0xf1:   dis_illegal(loc,opcode);  break;  // illegal
      case 0xf2:   dis_repnz(loc,opcode);  break;  // repnz
      case 0xf3:   dis_repz(loc,opcode);  break;  // repz
      case 0xf4:   dis_hlt(loc,opcode);  break;  // hlt
      case 0xf5:   dis_cmc(loc,opcode);  break;  // cmc
      case 0xf6:   dis_special(loc,opcode);  break;  // special
      case 0xf7:   dis_special(loc,opcode);  break;  // special
      case 0xf8:   dis_clc(loc,opcode);  break;  // clc
      case 0xf9:   dis_stc(loc,opcode);  break;  // stc
      case 0xfa:   dis_cli(loc,opcode);  break;  // cli
      case 0xfb:   dis_sti(loc,opcode);  break;  // sti
      case 0xfc:   dis_cld(loc,opcode);  break;  // cld
      case 0xfd:   dis_std(loc,opcode);  break;  // std
      case 0xfe:   dis_special(loc,opcode);  break;  // special
      case 0xff:   dis_special(loc,opcode);  break;  // special
      default:  dis_invalid("Ex86_dis.h"); break;
  }
