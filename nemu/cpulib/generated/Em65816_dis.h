  // Don't edit this file, it is machine generated
  switch(topcode) {
      case 0x0x00:   dis_brk(loc,opcode);  break;  // brk
      case 0x0x01:   dis_ora(loc,opcode);  break;  // ora
      case 0x0x02:   dis_cop(loc,opcode);  break;  // cop
      case 0x0x03:   dis_ora(loc,opcode);  break;  // ora
      case 0x0x04:   dis_tsb(loc,opcode);  break;  // tsb
      case 0x0x05:   dis_ora(loc,opcode);  break;  // ora
      case 0x0x06:   dis_asl(loc,opcode);  break;  // asl
      case 0x0x07:   dis_ora(loc,opcode);  break;  // ora
      case 0x0x08:   dis_php(loc,opcode);  break;  // php
      case 0x0x09:   dis_ora(loc,opcode);  break;  // ora
      case 0x0x0a:   dis_asl a(loc,opcode);  break;  // asl a
      case 0x0x0b:   dis_phd(loc,opcode);  break;  // phd
      case 0x0x0c:   dis_tsb(loc,opcode);  break;  // tsb
      case 0x0x0d:   dis_ora(loc,opcode);  break;  // ora
      case 0x0x0e:   dis_asl(loc,opcode);  break;  // asl
      case 0x0x0f:   dis_ora(loc,opcode);  break;  // ora
      case 0x0x10:   dis_bpl(loc,opcode);  break;  // bpl
      case 0x0x11:   dis_ora(loc,opcode);  break;  // ora
      case 0x0x12:   dis_ora(loc,opcode);  break;  // ora
      case 0x0x13:   dis_ora(loc,opcode);  break;  // ora
      case 0x0x14:   dis_trb(loc,opcode);  break;  // trb
      case 0x0x15:   dis_ora(loc,opcode);  break;  // ora
      case 0x0x16:   dis_asl(loc,opcode);  break;  // asl
      case 0x0x17:   dis_ora(loc,opcode);  break;  // ora
      case 0x0x18:   dis_clc(loc,opcode);  break;  // clc
      case 0x0x19:   dis_ora(loc,opcode);  break;  // ora
      case 0x0x1a:   dis_ina(loc,opcode);  break;  // ina
      case 0x0x1b:   dis_tcs(loc,opcode);  break;  // tcs
      case 0x0x1c:   dis_trb(loc,opcode);  break;  // trb
      case 0x0x1d:   dis_ora(loc,opcode);  break;  // ora
      case 0x0x1e:   dis_asl(loc,opcode);  break;  // asl
      case 0x0x1f:   dis_ora(loc,opcode);  break;  // ora
      case 0x0x20:   dis_jsr(loc,opcode);  break;  // jsr
      case 0x0x21:   dis_and(loc,opcode);  break;  // and
      case 0x0x23:   dis_jsrl(loc,opcode);  break;  // jsrl
      case 0x0x23:   dis_and(loc,opcode);  break;  // and
      case 0x0x24:   dis_bit(loc,opcode);  break;  // bit
      case 0x0x25:   dis_and(loc,opcode);  break;  // and
      case 0x0x26:   dis_rol(loc,opcode);  break;  // rol
      case 0x0x27:   dis_and(loc,opcode);  break;  // and
      case 0x0x28:   dis_plp(loc,opcode);  break;  // plp
      case 0x0x29:   dis_and(loc,opcode);  break;  // and
      case 0x0x2a:   dis_rol a(loc,opcode);  break;  // rol a
      case 0x0x2b:   dis_pld(loc,opcode);  break;  // pld
      case 0x0x2c:   dis_bit(loc,opcode);  break;  // bit
      case 0x0x2d:   dis_and(loc,opcode);  break;  // and
      case 0x0x2e:   dis_rol(loc,opcode);  break;  // rol
      case 0x0x2f:   dis_and(loc,opcode);  break;  // and
      case 0x0x30:   dis_bmi(loc,opcode);  break;  // bmi
      case 0x0x31:   dis_and(loc,opcode);  break;  // and
      case 0x0x32:   dis_and(loc,opcode);  break;  // and
      case 0x0x33:   dis_and(loc,opcode);  break;  // and
      case 0x0x34:   dis_bit(loc,opcode);  break;  // bit
      case 0x0x35:   dis_and(loc,opcode);  break;  // and
      case 0x0x36:   dis_rol(loc,opcode);  break;  // rol
      case 0x0x37:   dis_and(loc,opcode);  break;  // and
      case 0x0x38:   dis_sec(loc,opcode);  break;  // sec
      case 0x0x39:   dis_and(loc,opcode);  break;  // and
      case 0x0x3a:   dis_dea(loc,opcode);  break;  // dea
      case 0x0x3b:   dis_tsc(loc,opcode);  break;  // tsc
      case 0x0x3c:   dis_bit(loc,opcode);  break;  // bit
      case 0x0x3d:   dis_and(loc,opcode);  break;  // and
      case 0x0x3e:   dis_rol(loc,opcode);  break;  // rol
      case 0x0x3f:   dis_and(loc,opcode);  break;  // and
      case 0x0x40:   dis_rti(loc,opcode);  break;  // rti
      case 0x0x41:   dis_eor(loc,opcode);  break;  // eor
      case 0x0x42:   dis_wdm(loc,opcode);  break;  // wdm
      case 0x0x43:   dis_eor(loc,opcode);  break;  // eor
      case 0x0x44:   dis_mvp(loc,opcode);  break;  // mvp
      case 0x0x45:   dis_eor(loc,opcode);  break;  // eor
      case 0x0x46:   dis_lsr(loc,opcode);  break;  // lsr
      case 0x0x47:   dis_eor(loc,opcode);  break;  // eor
      case 0x0x48:   dis_pha(loc,opcode);  break;  // pha
      case 0x0x49:   dis_eor(loc,opcode);  break;  // eor
      case 0x0x4a:   dis_lsr a(loc,opcode);  break;  // lsr a
      case 0x0x4b:   dis_phk(loc,opcode);  break;  // phk
      case 0x0x4c:   dis_jmp(loc,opcode);  break;  // jmp
      case 0x0x4d:   dis_eor(loc,opcode);  break;  // eor
      case 0x0x4e:   dis_lsr(loc,opcode);  break;  // lsr
      case 0x0x4f:   dis_eor(loc,opcode);  break;  // eor
      case 0x0x50:   dis_bvc(loc,opcode);  break;  // bvc
      case 0x0x51:   dis_eor(loc,opcode);  break;  // eor
      case 0x0x52:   dis_eor(loc,opcode);  break;  // eor
      case 0x0x53:   dis_eor(loc,opcode);  break;  // eor
      case 0x0x54:   dis_mvn(loc,opcode);  break;  // mvn
      case 0x0x55:   dis_eor(loc,opcode);  break;  // eor
      case 0x0x56:   dis_lsr(loc,opcode);  break;  // lsr
      case 0x0x57:   dis_eor(loc,opcode);  break;  // eor
      case 0x0x58:   dis_cli(loc,opcode);  break;  // cli
      case 0x0x59:   dis_eor(loc,opcode);  break;  // eor
      case 0x0x5a:   dis_phy(loc,opcode);  break;  // phy
      case 0x0x5b:   dis_tcd(loc,opcode);  break;  // tcd
      case 0x0x5c:   dis_jmp(loc,opcode);  break;  // jmp
      case 0x0x5d:   dis_eor(loc,opcode);  break;  // eor
      case 0x0x5e:   dis_lsr(loc,opcode);  break;  // lsr
      case 0x0x5f:   dis_eor(loc,opcode);  break;  // eor
      case 0x0x60:   dis_rts(loc,opcode);  break;  // rts
      case 0x0x61:   dis_adc(loc,opcode);  break;  // adc
      case 0x0x62:   dis_per(loc,opcode);  break;  // per
      case 0x0x63:   dis_adc(loc,opcode);  break;  // adc
      case 0x0x64:   dis_stz(loc,opcode);  break;  // stz
      case 0x0x65:   dis_adc(loc,opcode);  break;  // adc
      case 0x0x66:   dis_ror(loc,opcode);  break;  // ror
      case 0x0x67:   dis_adc(loc,opcode);  break;  // adc
      case 0x0x68:   dis_pla(loc,opcode);  break;  // pla
      case 0x0x69:   dis_adc(loc,opcode);  break;  // adc
      case 0x0x6a:   dis_ror a(loc,opcode);  break;  // ror a
      case 0x0x6b:   dis_rtl(loc,opcode);  break;  // rtl
      case 0x0x6c:   dis_jmp(loc,opcode);  break;  // jmp
      case 0x0x6d:   dis_adc(loc,opcode);  break;  // adc
      case 0x0x6e:   dis_ror(loc,opcode);  break;  // ror
      case 0x0x6f:   dis_adc(loc,opcode);  break;  // adc
      case 0x0x70:   dis_bvs(loc,opcode);  break;  // bvs
      case 0x0x71:   dis_adc(loc,opcode);  break;  // adc
      case 0x0x72:   dis_adc(loc,opcode);  break;  // adc
      case 0x0x73:   dis_adc(loc,opcode);  break;  // adc
      case 0x0x74:   dis_stz(loc,opcode);  break;  // stz
      case 0x0x75:   dis_adc(loc,opcode);  break;  // adc
      case 0x0x76:   dis_ror(loc,opcode);  break;  // ror
      case 0x0x77:   dis_adc(loc,opcode);  break;  // adc
      case 0x0x78:   dis_sei(loc,opcode);  break;  // sei
      case 0x0x79:   dis_adc(loc,opcode);  break;  // adc
      case 0x0x7a:   dis_ply(loc,opcode);  break;  // ply
      case 0x0x7b:   dis_tdc(loc,opcode);  break;  // tdc
      case 0x0x7c:   dis_jmp(loc,opcode);  break;  // jmp
      case 0x0x7d:   dis_adc(loc,opcode);  break;  // adc
      case 0x0x7e:   dis_ror(loc,opcode);  break;  // ror
      case 0x0x7f:   dis_adc(loc,opcode);  break;  // adc
      case 0x0x80:   dis_bra(loc,opcode);  break;  // bra
      case 0x0x81:   dis_sta(loc,opcode);  break;  // sta
      case 0x0x82:   dis_brl(loc,opcode);  break;  // brl
      case 0x0x83:   dis_sta(loc,opcode);  break;  // sta
      case 0x0x84:   dis_sty(loc,opcode);  break;  // sty
      case 0x0x85:   dis_sta(loc,opcode);  break;  // sta
      case 0x0x86:   dis_stx(loc,opcode);  break;  // stx
      case 0x0x87:   dis_sta(loc,opcode);  break;  // sta
      case 0x0x88:   dis_dey(loc,opcode);  break;  // dey
      case 0x0x89:   dis_bit(loc,opcode);  break;  // bit
      case 0x0x8a:   dis_txa(loc,opcode);  break;  // txa
      case 0x0x8b:   dis_phb(loc,opcode);  break;  // phb
      case 0x0x8c:   dis_sty(loc,opcode);  break;  // sty
      case 0x0x8d:   dis_sta(loc,opcode);  break;  // sta
      case 0x0x8e:   dis_stx(loc,opcode);  break;  // stx
      case 0x0x8f:   dis_sta(loc,opcode);  break;  // sta
      case 0x0x90:   dis_bcc(loc,opcode);  break;  // bcc
      case 0x0x91:   dis_sta(loc,opcode);  break;  // sta
      case 0x0x92:   dis_sta(loc,opcode);  break;  // sta
      case 0x0x93:   dis_sta(loc,opcode);  break;  // sta
      case 0x0x94:   dis_sty(loc,opcode);  break;  // sty
      case 0x0x95:   dis_sta(loc,opcode);  break;  // sta
      case 0x0x96:   dis_stx(loc,opcode);  break;  // stx
      case 0x0x97:   dis_sta(loc,opcode);  break;  // sta
      case 0x0x98:   dis_tya(loc,opcode);  break;  // tya
      case 0x0x99:   dis_sta(loc,opcode);  break;  // sta
      case 0x0x9a:   dis_txs(loc,opcode);  break;  // txs
      case 0x0x9b:   dis_txy(loc,opcode);  break;  // txy
      case 0x0x9c:   dis_stz(loc,opcode);  break;  // stz
      case 0x0x9d:   dis_sta(loc,opcode);  break;  // sta
      case 0x0x9e:   dis_stz(loc,opcode);  break;  // stz
      case 0x0x9f:   dis_sta(loc,opcode);  break;  // sta
      case 0x0xa0:   dis_ldy(loc,opcode);  break;  // ldy
      case 0x0xa1:   dis_lda(loc,opcode);  break;  // lda
      case 0x0xa2:   dis_ldx(loc,opcode);  break;  // ldx
      case 0x0xa3:   dis_lda(loc,opcode);  break;  // lda
      case 0x0xa4:   dis_ldy(loc,opcode);  break;  // ldy
      case 0x0xa5:   dis_lda(loc,opcode);  break;  // lda
      case 0x0xa6:   dis_ldx(loc,opcode);  break;  // ldx
      case 0x0xa7:   dis_lda(loc,opcode);  break;  // lda
      case 0x0xa8:   dis_tay(loc,opcode);  break;  // tay
      case 0x0xa9:   dis_lda(loc,opcode);  break;  // lda
      case 0x0xaa:   dis_tax(loc,opcode);  break;  // tax
      case 0x0xab:   dis_plb(loc,opcode);  break;  // plb
      case 0x0xac:   dis_ldy(loc,opcode);  break;  // ldy
      case 0x0xad:   dis_lda(loc,opcode);  break;  // lda
      case 0x0xae:   dis_ldx(loc,opcode);  break;  // ldx
      case 0x0xaf:   dis_lda(loc,opcode);  break;  // lda
      case 0x0xb0:   dis_bcs(loc,opcode);  break;  // bcs
      case 0x0xb1:   dis_lda(loc,opcode);  break;  // lda
      case 0x0xb2:   dis_lda(loc,opcode);  break;  // lda
      case 0x0xb3:   dis_lda(loc,opcode);  break;  // lda
      case 0x0xb4:   dis_ldy(loc,opcode);  break;  // ldy
      case 0x0xb5:   dis_lda(loc,opcode);  break;  // lda
      case 0x0xb6:   dis_ldx(loc,opcode);  break;  // ldx
      case 0x0xb7:   dis_lda(loc,opcode);  break;  // lda
      case 0x0xb8:   dis_clv(loc,opcode);  break;  // clv
      case 0x0xb9:   dis_lda(loc,opcode);  break;  // lda
      case 0x0xba:   dis_tsx(loc,opcode);  break;  // tsx
      case 0x0xbb:   dis_tyx(loc,opcode);  break;  // tyx
      case 0x0xbc:   dis_ldy(loc,opcode);  break;  // ldy
      case 0x0xbd:   dis_lda(loc,opcode);  break;  // lda
      case 0x0xbe:   dis_ldx(loc,opcode);  break;  // ldx
      case 0x0xbf:   dis_lda(loc,opcode);  break;  // lda
      case 0x0xc0:   dis_cpy(loc,opcode);  break;  // cpy
      case 0x0xc1:   dis_cmp(loc,opcode);  break;  // cmp
      case 0x0xc2:   dis_rep(loc,opcode);  break;  // rep
      case 0x0xc3:   dis_cmp(loc,opcode);  break;  // cmp
      case 0x0xc4:   dis_cpy(loc,opcode);  break;  // cpy
      case 0x0xc5:   dis_cmp(loc,opcode);  break;  // cmp
      case 0x0xc6:   dis_dec(loc,opcode);  break;  // dec
      case 0x0xc7:   dis_cmp(loc,opcode);  break;  // cmp
      case 0x0xc8:   dis_iny(loc,opcode);  break;  // iny
      case 0x0xc9:   dis_cmp(loc,opcode);  break;  // cmp
      case 0x0xca:   dis_dex(loc,opcode);  break;  // dex
      case 0x0xcb:   dis_wai(loc,opcode);  break;  // wai
      case 0x0xcc:   dis_cpy(loc,opcode);  break;  // cpy
      case 0x0xcd:   dis_cmp(loc,opcode);  break;  // cmp
      case 0x0xce:   dis_dec(loc,opcode);  break;  // dec
      case 0x0xcf:   dis_cmp(loc,opcode);  break;  // cmp
      case 0x0xd0:   dis_bne(loc,opcode);  break;  // bne
      case 0x0xd1:   dis_cmp(loc,opcode);  break;  // cmp
      case 0x0xd2:   dis_cmp(loc,opcode);  break;  // cmp
      case 0x0xd3:   dis_cmp(loc,opcode);  break;  // cmp
      case 0x0xd4:   dis_pei(loc,opcode);  break;  // pei
      case 0x0xd5:   dis_cmp(loc,opcode);  break;  // cmp
      case 0x0xd6:   dis_dec(loc,opcode);  break;  // dec
      case 0x0xd7:   dis_???(loc,opcode);  break;  // ???
      case 0x0xd8:   dis_cld(loc,opcode);  break;  // cld
      case 0x0xd9:   dis_cmp(loc,opcode);  break;  // cmp
      case 0x0xda:   dis_phx(loc,opcode);  break;  // phx
      case 0x0xdb:   dis_stp(loc,opcode);  break;  // stp
      case 0x0xdc:   dis_jmp(loc,opcode);  break;  // jmp
      case 0x0xdd:   dis_cmp(loc,opcode);  break;  // cmp
      case 0x0xde:   dis_dec(loc,opcode);  break;  // dec
      case 0x0xdf:   dis_cmp(loc,opcode);  break;  // cmp
      case 0x0xe0:   dis_cpx(loc,opcode);  break;  // cpx
      case 0x0xe1:   dis_sbc(loc,opcode);  break;  // sbc
      case 0x0xe2:   dis_sep(loc,opcode);  break;  // sep
      case 0x0xe3:   dis_sbc(loc,opcode);  break;  // sbc
      case 0x0xe4:   dis_cpx(loc,opcode);  break;  // cpx
      case 0x0xe5:   dis_sbc(loc,opcode);  break;  // sbc
      case 0x0xe6:   dis_inc(loc,opcode);  break;  // inc
      case 0x0xe7:   dis_sbc(loc,opcode);  break;  // sbc
      case 0x0xe8:   dis_inx(loc,opcode);  break;  // inx
      case 0x0xe9:   dis_sbc(loc,opcode);  break;  // sbc
      case 0x0xea:   dis_nop(loc,opcode);  break;  // nop
      case 0x0xeb:   dis_xba(loc,opcode);  break;  // xba
      case 0x0xec:   dis_cpx(loc,opcode);  break;  // cpx
      case 0x0xed:   dis_sbc(loc,opcode);  break;  // sbc
      case 0x0xee:   dis_inc(loc,opcode);  break;  // inc
      case 0x0xef:   dis_sbc(loc,opcode);  break;  // sbc
      case 0x0xf0:   dis_beq(loc,opcode);  break;  // beq
      case 0x0xf1:   dis_sbc(loc,opcode);  break;  // sbc
      case 0x0xf2:   dis_sbc(loc,opcode);  break;  // sbc
      case 0x0xf3:   dis_sbc(loc,opcode);  break;  // sbc
      case 0x0xf4:   dis_pea(loc,opcode);  break;  // pea
      case 0x0xf5:   dis_sbc(loc,opcode);  break;  // sbc
      case 0x0xf6:   dis_inc(loc,opcode);  break;  // inc
      case 0x0xf7:   dis_sbc(loc,opcode);  break;  // sbc
      case 0x0xf8:   dis_sed(loc,opcode);  break;  // sed
      case 0x0xf9:   dis_sbc(loc,opcode);  break;  // sbc
      case 0x0xfa:   dis_plx(loc,opcode);  break;  // plx
      case 0x0xfb:   dis_xce(loc,opcode);  break;  // xce
      case 0x0xfc:   dis_jsr(loc,opcode);  break;  // jsr
      case 0x0xfd:   dis_sbc(loc,opcode);  break;  // sbc
      case 0x0xfe:   dis_inc(loc,opcode);  break;  // inc
      case 0x0xff:   dis_sbc(loc,opcode);  break;  // sbc
      default:  dis_invalid("Em65816_dis.h"); break;
  }
