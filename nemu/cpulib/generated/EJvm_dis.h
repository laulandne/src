  // Don't edit this file, it is machine generated
  switch(topcode) {
      case 0x0:   dis_nop(loc,opcode);  break;  // nop
      case 0x1:   dis_aconst_null(loc,opcode);  break;  // aconst_null
      case 0x2:   dis_iconst_m1(loc,opcode);  break;  // iconst_m1
      case 0x3:   dis_iconst_0(loc,opcode);  break;  // iconst_0
      case 0x4:   dis_iconst_1(loc,opcode);  break;  // iconst_1
      case 0x5:   dis_iconst_2(loc,opcode);  break;  // iconst_2
      case 0x6:   dis_iconst_3(loc,opcode);  break;  // iconst_3
      case 0x7:   dis_iconst_4(loc,opcode);  break;  // iconst_4
      case 0x8:   dis_iconst_5(loc,opcode);  break;  // iconst_5
      case 0x9:   dis_lconst_0(loc,opcode);  break;  // lconst_0
      case 0x0A:   dis_lconst_1(loc,opcode);  break;  // lconst_1
      case 0x0B:   dis_fconst_0(loc,opcode);  break;  // fconst_0
      case 0x0C:   dis_fconst_1(loc,opcode);  break;  // fconst_1
      case 0x0D:   dis_fconst_2(loc,opcode);  break;  // fconst_2
      case 0x0E:   dis_dconst_0(loc,opcode);  break;  // dconst_0
      case 0x0F:   dis_dconst_1(loc,opcode);  break;  // dconst_1
      case 0x10:   dis_bipush(loc,opcode);  break;  // bipush
      case 0x11:   dis_sipush(loc,opcode);  break;  // sipush
      case 0x12:   dis_ldc(loc,opcode);  break;  // ldc
      case 0x13:   dis_ldc_w(loc,opcode);  break;  // ldc_w
      case 0x14:   dis_ldc2_w(loc,opcode);  break;  // ldc2_w
      case 0x15:   dis_iload(loc,opcode);  break;  // iload
      case 0x16:   dis_lload(loc,opcode);  break;  // lload
      case 0x17:   dis_fload(loc,opcode);  break;  // fload
      case 0x18:   dis_dload(loc,opcode);  break;  // dload
      case 0x19:   dis_aload(loc,opcode);  break;  // aload
      case 0x1A:   dis_iload_0(loc,opcode);  break;  // iload_0
      case 0x1B:   dis_iload_1(loc,opcode);  break;  // iload_1
      case 0x1C:   dis_iload_2(loc,opcode);  break;  // iload_2
      case 0x1D:   dis_iload_3(loc,opcode);  break;  // iload_3
      case 0x1E:   dis_lload_0(loc,opcode);  break;  // lload_0
      case 0x1F:   dis_lload_1(loc,opcode);  break;  // lload_1
      case 0x20:   dis_lload_2(loc,opcode);  break;  // lload_2
      case 0x21:   dis_lload_3(loc,opcode);  break;  // lload_3
      case 0x22:   dis_fload_0(loc,opcode);  break;  // fload_0
      case 0x23:   dis_fload_1(loc,opcode);  break;  // fload_1
      case 0x24:   dis_fload_2(loc,opcode);  break;  // fload_2
      case 0x25:   dis_fload_3(loc,opcode);  break;  // fload_3
      case 0x26:   dis_dload_0(loc,opcode);  break;  // dload_0
      case 0x27:   dis_dload_1(loc,opcode);  break;  // dload_1
      case 0x28:   dis_dload_2(loc,opcode);  break;  // dload_2
      case 0x29:   dis_dload_3(loc,opcode);  break;  // dload_3
      case 0x2A:   dis_aload_0(loc,opcode);  break;  // aload_0
      case 0x2B:   dis_aload_1(loc,opcode);  break;  // aload_1
      case 0x2C:   dis_aload_2(loc,opcode);  break;  // aload_2
      case 0x2D:   dis_aload_3(loc,opcode);  break;  // aload_3
      case 0x2E:   dis_iaload(loc,opcode);  break;  // iaload
      case 0x2F:   dis_laload(loc,opcode);  break;  // laload
      case 0x30:   dis_faload(loc,opcode);  break;  // faload
      case 0x31:   dis_daload(loc,opcode);  break;  // daload
      case 0x32:   dis_aaload(loc,opcode);  break;  // aaload
      case 0x33:   dis_baload(loc,opcode);  break;  // baload
      case 0x34:   dis_caload(loc,opcode);  break;  // caload
      case 0x35:   dis_saload(loc,opcode);  break;  // saload
      case 0x36:   dis_istore(loc,opcode);  break;  // istore
      case 0x37:   dis_lstore(loc,opcode);  break;  // lstore
      case 0x38:   dis_fstore(loc,opcode);  break;  // fstore
      case 0x39:   dis_dstore(loc,opcode);  break;  // dstore
      case 0x3A:   dis_astore(loc,opcode);  break;  // astore
      case 0x3B:   dis_istore_0(loc,opcode);  break;  // istore_0
      case 0x3C:   dis_istore_1(loc,opcode);  break;  // istore_1
      case 0x3D:   dis_istore_2(loc,opcode);  break;  // istore_2
      case 0x3E:   dis_istore_3(loc,opcode);  break;  // istore_3
      case 0x3F:   dis_lstore_0(loc,opcode);  break;  // lstore_0
      case 0x40:   dis_lstore_1(loc,opcode);  break;  // lstore_1
      case 0x41:   dis_lstore_2(loc,opcode);  break;  // lstore_2
      case 0x42:   dis_lstore_3(loc,opcode);  break;  // lstore_3
      case 0x43:   dis_fstore_0(loc,opcode);  break;  // fstore_0
      case 0x44:   dis_fstore_1(loc,opcode);  break;  // fstore_1
      case 0x45:   dis_fstore_2(loc,opcode);  break;  // fstore_2
      case 0x46:   dis_fstore_3(loc,opcode);  break;  // fstore_3
      case 0x47:   dis_dstore_0(loc,opcode);  break;  // dstore_0
      case 0x48:   dis_dstore_1(loc,opcode);  break;  // dstore_1
      case 0x49:   dis_dstore_2(loc,opcode);  break;  // dstore_2
      case 0x4A:   dis_dstore_3(loc,opcode);  break;  // dstore_3
      case 0x4B:   dis_astore_0(loc,opcode);  break;  // astore_0
      case 0x4C:   dis_astore_1(loc,opcode);  break;  // astore_1
      case 0x4D:   dis_astore_2(loc,opcode);  break;  // astore_2
      case 0x4E:   dis_astore_3(loc,opcode);  break;  // astore_3
      case 0x4F:   dis_iastore(loc,opcode);  break;  // iastore
      case 0x50:   dis_lastore(loc,opcode);  break;  // lastore
      case 0x51:   dis_fastore(loc,opcode);  break;  // fastore
      case 0x52:   dis_dastore(loc,opcode);  break;  // dastore
      case 0x53:   dis_aastore(loc,opcode);  break;  // aastore
      case 0x54:   dis_bastore(loc,opcode);  break;  // bastore
      case 0x55:   dis_castore(loc,opcode);  break;  // castore
      case 0x56:   dis_sastore(loc,opcode);  break;  // sastore
      case 0x57:   dis_pop(loc,opcode);  break;  // pop
      case 0x58:   dis_pop2(loc,opcode);  break;  // pop2
      case 0x59:   dis_dup(loc,opcode);  break;  // dup
      case 0x5A:   dis_dup_x1(loc,opcode);  break;  // dup_x1
      case 0x5B:   dis_dup_x2(loc,opcode);  break;  // dup_x2
      case 0x5C:   dis_dup2(loc,opcode);  break;  // dup2
      case 0x5D:   dis_dup2_x1(loc,opcode);  break;  // dup2_x1
      case 0x5E:   dis_dup2_x2(loc,opcode);  break;  // dup2_x2
      case 0x5F:   dis_swap(loc,opcode);  break;  // swap
      case 0x60:   dis_iadd(loc,opcode);  break;  // iadd
      case 0x61:   dis_ladd(loc,opcode);  break;  // ladd
      case 0x62:   dis_fadd(loc,opcode);  break;  // fadd
      case 0x63:   dis_dadd(loc,opcode);  break;  // dadd
      case 0x64:   dis_isub(loc,opcode);  break;  // isub
      case 0x65:   dis_lsub(loc,opcode);  break;  // lsub
      case 0x66:   dis_fsub(loc,opcode);  break;  // fsub
      case 0x67:   dis_dsub(loc,opcode);  break;  // dsub
      case 0x68:   dis_imul(loc,opcode);  break;  // imul
      case 0x69:   dis_lmul(loc,opcode);  break;  // lmul
      case 0x6A:   dis_fmul(loc,opcode);  break;  // fmul
      case 0x6B:   dis_dmul(loc,opcode);  break;  // dmul
      case 0x6C:   dis_idiv(loc,opcode);  break;  // idiv
      case 0x6D:   dis_ldiv(loc,opcode);  break;  // ldiv
      case 0x6E:   dis_fdiv(loc,opcode);  break;  // fdiv
      case 0x6F:   dis_ddiv(loc,opcode);  break;  // ddiv
      case 0x70:   dis_irem(loc,opcode);  break;  // irem
      case 0x71:   dis_lrem(loc,opcode);  break;  // lrem
      case 0x72:   dis_frem(loc,opcode);  break;  // frem
      case 0x73:   dis_drem(loc,opcode);  break;  // drem
      case 0x74:   dis_ineg(loc,opcode);  break;  // ineg
      case 0x75:   dis_lneg(loc,opcode);  break;  // lneg
      case 0x76:   dis_fneg(loc,opcode);  break;  // fneg
      case 0x77:   dis_dneg(loc,opcode);  break;  // dneg
      case 0x78:   dis_ishl(loc,opcode);  break;  // ishl
      case 0x79:   dis_lshl(loc,opcode);  break;  // lshl
      case 0x7A:   dis_ishr(loc,opcode);  break;  // ishr
      case 0x7B:   dis_lshr(loc,opcode);  break;  // lshr
      case 0x7C:   dis_iushr(loc,opcode);  break;  // iushr
      case 0x7D:   dis_lushr(loc,opcode);  break;  // lushr
      case 0x7E:   dis_iand(loc,opcode);  break;  // iand
      case 0x7F:   dis_land(loc,opcode);  break;  // land
      case 0x80:   dis_ior(loc,opcode);  break;  // ior
      case 0x81:   dis_lor(loc,opcode);  break;  // lor
      case 0x82:   dis_ixor(loc,opcode);  break;  // ixor
      case 0x83:   dis_lxor(loc,opcode);  break;  // lxor
      case 0x84:   dis_iinc(loc,opcode);  break;  // iinc
      case 0x85:   dis_i2l(loc,opcode);  break;  // i2l
      case 0x86:   dis_i2f(loc,opcode);  break;  // i2f
      case 0x87:   dis_i2d(loc,opcode);  break;  // i2d
      case 0x88:   dis_l2i(loc,opcode);  break;  // l2i
      case 0x89:   dis_l2f(loc,opcode);  break;  // l2f
      case 0x8A:   dis_l2d(loc,opcode);  break;  // l2d
      case 0x8B:   dis_f2i(loc,opcode);  break;  // f2i
      case 0x8C:   dis_f2l(loc,opcode);  break;  // f2l
      case 0x8D:   dis_f2d(loc,opcode);  break;  // f2d
      case 0x8E:   dis_d2i(loc,opcode);  break;  // d2i
      case 0x8F:   dis_d2l(loc,opcode);  break;  // d2l
      case 0x90:   dis_d2f(loc,opcode);  break;  // d2f
      case 0x91:   dis_i2b(loc,opcode);  break;  // i2b
      case 0x92:   dis_i2c(loc,opcode);  break;  // i2c
      case 0x93:   dis_i2s(loc,opcode);  break;  // i2s
      case 0x94:   dis_lcmp(loc,opcode);  break;  // lcmp
      case 0x95:   dis_fcmpl(loc,opcode);  break;  // fcmpl
      case 0x96:   dis_fcmpg(loc,opcode);  break;  // fcmpg
      case 0x97:   dis_dcmpl(loc,opcode);  break;  // dcmpl
      case 0x98:   dis_dcmpg(loc,opcode);  break;  // dcmpg
      case 0x99:   dis_ifeq(loc,opcode);  break;  // ifeq
      case 0x9A:   dis_ifne(loc,opcode);  break;  // ifne
      case 0x9B:   dis_iflt(loc,opcode);  break;  // iflt
      case 0x9C:   dis_ifge(loc,opcode);  break;  // ifge
      case 0x9D:   dis_ifgt(loc,opcode);  break;  // ifgt
      case 0x9E:   dis_ifle(loc,opcode);  break;  // ifle
      case 0x9F:   dis_if_icmpeq(loc,opcode);  break;  // if_icmpeq
      case 0xA0:   dis_if_icmpne(loc,opcode);  break;  // if_icmpne
      case 0xA1:   dis_if_icmplt(loc,opcode);  break;  // if_icmplt
      case 0xA2:   dis_if_icmpge(loc,opcode);  break;  // if_icmpge
      case 0xA3:   dis_if_icmpgt(loc,opcode);  break;  // if_icmpgt
      case 0xA4:   dis_if_icmple(loc,opcode);  break;  // if_icmple
      case 0xA5:   dis_if_acmpeq(loc,opcode);  break;  // if_acmpeq
      case 0xA6:   dis_ifacmpne(loc,opcode);  break;  // ifacmpne
      case 0xA7:   dis_goto(loc,opcode);  break;  // goto
      case 0xA8:   dis_jsr(loc,opcode);  break;  // jsr
      case 0xA9:   dis_ret(loc,opcode);  break;  // ret
      case 0xAA:   dis_tableswitch(loc,opcode);  break;  // tableswitch
      case 0xAB:   dis_lookupswitch(loc,opcode);  break;  // lookupswitch
      case 0xAC:   dis_ireturn(loc,opcode);  break;  // ireturn
      case 0xAD:   dis_lreturn(loc,opcode);  break;  // lreturn
      case 0xAE:   dis_freturn(loc,opcode);  break;  // freturn
      case 0xAF:   dis_dreturn(loc,opcode);  break;  // dreturn
      case 0xB0:   dis_areturn(loc,opcode);  break;  // areturn
      case 0xB1:   dis_return(loc,opcode);  break;  // return
      case 0xB2:   dis_getstatic(loc,opcode);  break;  // getstatic
      case 0xB3:   dis_putstatic(loc,opcode);  break;  // putstatic
      case 0xB4:   dis_getfield(loc,opcode);  break;  // getfield
      case 0xB5:   dis_putfield(loc,opcode);  break;  // putfield
      case 0xB6:   dis_invokevirtual(loc,opcode);  break;  // invokevirtual
      case 0xB7:   dis_invokespecial(loc,opcode);  break;  // invokespecial
      case 0xB8:   dis_invokestatic(loc,opcode);  break;  // invokestatic
      case 0xB9:   dis_invokeinterface(loc,opcode);  break;  // invokeinterface
      case 0xBA:   dis_illegal(loc,opcode);  break;  // illegal
      case 0xBB:   dis_new(loc,opcode);  break;  // new
      case 0xBC:   dis_newarray(loc,opcode);  break;  // newarray
      case 0xBD:   dis_anewarray(loc,opcode);  break;  // anewarray
      case 0xBE:   dis_arraylength(loc,opcode);  break;  // arraylength
      case 0xBF:   dis_athrow(loc,opcode);  break;  // athrow
      case 0xC0:   dis_checkcast(loc,opcode);  break;  // checkcast
      case 0xC1:   dis_instanceof(loc,opcode);  break;  // instanceof
      case 0xC2:   dis_monitorenter(loc,opcode);  break;  // monitorenter
      case 0xC3:   dis_monitorexit(loc,opcode);  break;  // monitorexit
      case 0xC4:   dis_wide(loc,opcode);  break;  // wide
      case 0xC5:   dis_multinewarray(loc,opcode);  break;  // multinewarray
      case 0xC6:   dis_ifnull(loc,opcode);  break;  // ifnull
      case 0xC7:   dis_ifnonnull(loc,opcode);  break;  // ifnonnull
      case 0xC8:   dis_goto_w(loc,opcode);  break;  // goto_w
      case 0xC9:   dis_jsr_w(loc,opcode);  break;  // jsr_w
      case 0xCA:   dis_breakpoint(loc,opcode);  break;  // breakpoint
      case 0xCB:   dis_ldc_quick(loc,opcode);  break;  // ldc_quick
      case 0xCC:   dis_ldc_w_quick(loc,opcode);  break;  // ldc_w_quick
      case 0xCD:   dis_ldc2_w_quick(loc,opcode);  break;  // ldc2_w_quick
      case 0xCE:   dis_getfield_quick(loc,opcode);  break;  // getfield_quick
      case 0xCF:   dis_putfield_quick(loc,opcode);  break;  // putfield_quick
      case 0xD0:   dis_getfield2_quick(loc,opcode);  break;  // getfield2_quick
      case 0xD1:   dis_putfield2_quick(loc,opcode);  break;  // putfield2_quick
      case 0xD2:   dis_getstatic_quick(loc,opcode);  break;  // getstatic_quick
      case 0xD3:   dis_putstatic_quick(loc,opcode);  break;  // putstatic_quick
      case 0xD4:   dis_getstatic2_quick(loc,opcode);  break;  // getstatic2_quick
      case 0xD5:   dis_putstatic2_quick(loc,opcode);  break;  // putstatic2_quick
      case 0xD6:   dis_invokevirtual_quick(loc,opcode);  break;  // invokevirtual_quick
      case 0xD7:   dis_invokenonvirtual_quick(loc,opcode);  break;  // invokenonvirtual_quick
      case 0xD8:   dis_invokesuper_quick(loc,opcode);  break;  // invokesuper_quick
      case 0xD9:   dis_invokestatic_quick(loc,opcode);  break;  // invokestatic_quick
      case 0xDA:   dis_invokeinterface_quick(loc,opcode);  break;  // invokeinterface_quick
      case 0xDB:   dis_invokevirtualobject_quick(loc,opcode);  break;  // invokevirtualobject_quick
      case 0xDC:   dis_illegal(loc,opcode);  break;  // illegal
      case 0xDD:   dis_new_quick(loc,opcode);  break;  // new_quick
      case 0xDE:   dis_anewarray_quick(loc,opcode);  break;  // anewarray_quick
      case 0xDF:   dis_multinewarray_quick(loc,opcode);  break;  // multinewarray_quick
      case 0xE0:   dis_checkcast_quick(loc,opcode);  break;  // checkcast_quick
      case 0xE1:   dis_instanceof_quick(loc,opcode);  break;  // instanceof_quick
      case 0xE2:   dis_invokevirtual_quick_w(loc,opcode);  break;  // invokevirtual_quick_w
      case 0xE3:   dis_getfield_quick_w(loc,opcode);  break;  // getfield_quick_w
      case 0xE4:   dis_putfield_quick_w(loc,opcode);  break;  // putfield_quick_w
      case 0xE5:   dis_illegal(loc,opcode);  break;  // illegal
      case 0xE6:   dis_illegal(loc,opcode);  break;  // illegal
      case 0xE7:   dis_illegal(loc,opcode);  break;  // illegal
      case 0xE8:   dis_illegal(loc,opcode);  break;  // illegal
      case 0xE9:   dis_illegal(loc,opcode);  break;  // illegal
      case 0xEA:   dis_illegal(loc,opcode);  break;  // illegal
      case 0xEB:   dis_illegal(loc,opcode);  break;  // illegal
      case 0xEC:   dis_illegal(loc,opcode);  break;  // illegal
      case 0xED:   dis_illegal(loc,opcode);  break;  // illegal
      case 0xEE:   dis_illegal(loc,opcode);  break;  // illegal
      case 0xEF:   dis_illegal(loc,opcode);  break;  // illegal
      case 0xF0:   dis_illegal(loc,opcode);  break;  // illegal
      case 0xF1:   dis_illegal(loc,opcode);  break;  // illegal
      case 0xF2:   dis_illegal(loc,opcode);  break;  // illegal
      case 0xF3:   dis_illegal(loc,opcode);  break;  // illegal
      case 0xF4:   dis_illegal(loc,opcode);  break;  // illegal
      case 0xF5:   dis_illegal(loc,opcode);  break;  // illegal
      case 0xF6:   dis_illegal(loc,opcode);  break;  // illegal
      case 0xF7:   dis_illegal(loc,opcode);  break;  // illegal
      case 0xF8:   dis_illegal(loc,opcode);  break;  // illegal
      case 0xF9:   dis_illegal(loc,opcode);  break;  // illegal
      case 0xFA:   dis_illegal(loc,opcode);  break;  // illegal
      case 0xFB:   dis_illegal(loc,opcode);  break;  // illegal
      case 0xFC:   dis_illegal(loc,opcode);  break;  // illegal
      case 0xFD:   dis_illegal(loc,opcode);  break;  // illegal
      case 0xFE:   dis_impdep1(loc,opcode);  break;  // impdep1
      case 0xFF:   dis_impdep2(loc,opcode);  break;  // impdep2
      default:  dis_invalid("EJvm_dis.h"); break;
  }
