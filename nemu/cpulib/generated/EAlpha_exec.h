  // Don't edit this file, it is machine generated
  switch(topcode) {
      case 0x0:   exec_illegal(loc,opcode);  break;
      case 0x1:   exec_illegal(loc,opcode);  break;
      case 0x2:   exec_illegal(loc,opcode);  break;
      case 0x3:   exec_illegal(loc,opcode);  break;
      case 0x4:   exec_illegal(loc,opcode);  break;
      case 0x5:   exec_illegal(loc,opcode);  break;
      case 0x6:   exec_illegal(loc,opcode);  break;
      case 0x7:   exec_illegal(loc,opcode);  break;
      case 0x8:   exec_lda(loc,opcode);  break;
      case 0x9:   exec_ldah(loc,opcode);  break;
      case 0x0A:   exec_illegal(loc,opcode);  break;
      case 0x0B:   exec_illegal(loc,opcode);  break;
      case 0x0C:   exec_illegal(loc,opcode);  break;
      case 0x0D:   exec_illegal(loc,opcode);  break;
      case 0x0E:   exec_illegal(loc,opcode);  break;
      case 0x0F:   exec_illegal(loc,opcode);  break;
      case 0x10:   exec_illegal(loc,opcode);  break;
      case 0x11:   exec_mov(loc,opcode);  break;
      case 0x12:   exec_illegal(loc,opcode);  break;
      case 0x13:   exec_illegal(loc,opcode);  break;
      case 0x14:   exec_illegal(loc,opcode);  break;
      case 0x15:   exec_illegal(loc,opcode);  break;
      case 0x16:   exec_illegal(loc,opcode);  break;
      case 0x17:   exec_illegal(loc,opcode);  break;
      case 0x18:   exec_illegal(loc,opcode);  break;
      case 0x19:   exec_illegal(loc,opcode);  break;
      case 0x1A:   exec_jsr(loc,opcode);  break;
      case 0x1B:   exec_illegal(loc,opcode);  break;
      case 0x1C:   exec_illegal(loc,opcode);  break;
      case 0x1D:   exec_illegal(loc,opcode);  break;
      case 0x1E:   exec_illegal(loc,opcode);  break;
      case 0x1F:   exec_illegal(loc,opcode);  break;
      case 0x20:   exec_illegal(loc,opcode);  break;
      case 0x21:   exec_illegal(loc,opcode);  break;
      case 0x22:   exec_illegal(loc,opcode);  break;
      case 0x23:   exec_illegal(loc,opcode);  break;
      case 0x24:   exec_illegal(loc,opcode);  break;
      case 0x25:   exec_illegal(loc,opcode);  break;
      case 0x26:   exec_illegal(loc,opcode);  break;
      case 0x27:   exec_illegal(loc,opcode);  break;
      case 0x28:   exec_ldl(loc,opcode);  break;
      case 0x29:   exec_ldq(loc,opcode);  break;
      case 0x2A:   exec_illegal(loc,opcode);  break;
      case 0x2B:   exec_illegal(loc,opcode);  break;
      case 0x2C:   exec_stl(loc,opcode);  break;
      case 0x2D:   exec_stq(loc,opcode);  break;
      case 0x2E:   exec_illegal(loc,opcode);  break;
      case 0x2F:   exec_illegal(loc,opcode);  break;
      case 0x30:   exec_illegal(loc,opcode);  break;
      case 0x31:   exec_illegal(loc,opcode);  break;
      case 0x32:   exec_illegal(loc,opcode);  break;
      case 0x33:   exec_illegal(loc,opcode);  break;
      case 0x34:   exec_illegal(loc,opcode);  break;
      case 0x35:   exec_illegal(loc,opcode);  break;
      case 0x36:   exec_illegal(loc,opcode);  break;
      case 0x37:   exec_illegal(loc,opcode);  break;
      case 0x38:   exec_illegal(loc,opcode);  break;
      case 0x39:   exec_illegal(loc,opcode);  break;
      case 0x3A:   exec_illegal(loc,opcode);  break;
      case 0x3B:   exec_illegal(loc,opcode);  break;
      case 0x3C:   exec_illegal(loc,opcode);  break;
      case 0x3D:   exec_illegal(loc,opcode);  break;
      case 0x3E:   exec_illegal(loc,opcode);  break;
      case 0x3F:   exec_illegal(loc,opcode);  break;
      case 0x40:   exec_illegal(loc,opcode);  break;
      default:  exec_invalid("EAlpha_exec.h"); break;
  }
