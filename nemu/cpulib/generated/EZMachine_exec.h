  // Don't edit this file, it is machine generated
  switch(topcode) {
      case 0x0:   exec_illegal(loc,opcode);  break;
      case 0x1:   exec_je(loc,opcode);  break;
      case 0x2:   exec_jl(loc,opcode);  break;
      case 0x3:   exec_jg(loc,opcode);  break;
      case 0x4:   exec_dec_chk(loc,opcode);  break;
      case 0x5:   exec_inc_chk(loc,opcode);  break;
      case 0x6:   exec_jin(loc,opcode);  break;
      case 0x7:   exec_test(loc,opcode);  break;
      case 0x8:   exec_or(loc,opcode);  break;
      case 0x9:   exec_and(loc,opcode);  break;
      case 0x0A:   exec_test_attr(loc,opcode);  break;
      case 0x0B:   exec_set_attr(loc,opcode);  break;
      case 0x0C:   exec_clear_attr(loc,opcode);  break;
      case 0x0D:   exec_store(loc,opcode);  break;
      case 0x0E:   exec_insert_obj(loc,opcode);  break;
      case 0x0F:   exec_loadw(loc,opcode);  break;
      case 0x10:   exec_loadb(loc,opcode);  break;
      case 0x11:   exec_get_prop(loc,opcode);  break;
      case 0x12:   exec_get_prop_addr(loc,opcode);  break;
      case 0x13:   exec_get_next_prop(loc,opcode);  break;
      case 0x14:   exec_add(loc,opcode);  break;
      case 0x15:   exec_sub(loc,opcode);  break;
      case 0x16:   exec_mul(loc,opcode);  break;
      case 0x17:   exec_div(loc,opcode);  break;
      case 0x18:   exec_mod(loc,opcode);  break;
      case 0x19:   exec_call_2s(loc,opcode);  break;
      case 0x1A:   exec_call_2n(loc,opcode);  break;
      case 0x1B:   exec_set_colour(loc,opcode);  break;
      case 0x1C:   exec_throw(loc,opcode);  break;
      case 0x1D:   exec_illegal(loc,opcode);  break;
      case 0x1E:   exec_illegal(loc,opcode);  break;
      case 0x1F:   exec_illegal(loc,opcode);  break;
      case 0x20:   exec_illegal(loc,opcode);  break;
      case 0x21:   exec_je(loc,opcode);  break;
      case 0x22:   exec_jl(loc,opcode);  break;
      case 0x23:   exec_jg(loc,opcode);  break;
      case 0x24:   exec_dec_chk(loc,opcode);  break;
      case 0x25:   exec_inc_chk(loc,opcode);  break;
      case 0x26:   exec_jin(loc,opcode);  break;
      case 0x27:   exec_test(loc,opcode);  break;
      case 0x28:   exec_or(loc,opcode);  break;
      case 0x29:   exec_and(loc,opcode);  break;
      case 0x2A:   exec_test_attr(loc,opcode);  break;
      case 0x2B:   exec_set_attr(loc,opcode);  break;
      case 0x2C:   exec_clear_attr(loc,opcode);  break;
      case 0x2D:   exec_store(loc,opcode);  break;
      case 0x2E:   exec_insert_obj(loc,opcode);  break;
      case 0x2F:   exec_loadw(loc,opcode);  break;
      case 0x30:   exec_loadb(loc,opcode);  break;
      case 0x31:   exec_get_prop(loc,opcode);  break;
      case 0x32:   exec_get_prop_addr(loc,opcode);  break;
      case 0x33:   exec_get_next_prop(loc,opcode);  break;
      case 0x34:   exec_add(loc,opcode);  break;
      case 0x35:   exec_sub(loc,opcode);  break;
      case 0x36:   exec_mul(loc,opcode);  break;
      case 0x37:   exec_div(loc,opcode);  break;
      case 0x38:   exec_mod(loc,opcode);  break;
      case 0x39:   exec_call_2s(loc,opcode);  break;
      case 0x3A:   exec_call_2n(loc,opcode);  break;
      case 0x3B:   exec_set_colour(loc,opcode);  break;
      case 0x3C:   exec_throw(loc,opcode);  break;
      case 0x3D:   exec_illegal(loc,opcode);  break;
      case 0x3E:   exec_illegal(loc,opcode);  break;
      case 0x3F:   exec_illegal(loc,opcode);  break;
      case 0x40:   exec_illegal(loc,opcode);  break;
      case 0x41:   exec_je(loc,opcode);  break;
      case 0x42:   exec_jl(loc,opcode);  break;
      case 0x43:   exec_jg(loc,opcode);  break;
      case 0x44:   exec_dec_chk(loc,opcode);  break;
      case 0x45:   exec_inc_chk(loc,opcode);  break;
      case 0x46:   exec_jin(loc,opcode);  break;
      case 0x47:   exec_test(loc,opcode);  break;
      case 0x48:   exec_or(loc,opcode);  break;
      case 0x49:   exec_and(loc,opcode);  break;
      case 0x4A:   exec_test_attr(loc,opcode);  break;
      case 0x4B:   exec_set_attr(loc,opcode);  break;
      case 0x4C:   exec_clear_attr(loc,opcode);  break;
      case 0x4D:   exec_store(loc,opcode);  break;
      case 0x4E:   exec_insert_obj(loc,opcode);  break;
      case 0x4F:   exec_loadw(loc,opcode);  break;
      case 0x50:   exec_loadb(loc,opcode);  break;
      case 0x51:   exec_get_prop(loc,opcode);  break;
      case 0x52:   exec_get_prop_addr(loc,opcode);  break;
      case 0x53:   exec_get_next_prop(loc,opcode);  break;
      case 0x54:   exec_add(loc,opcode);  break;
      case 0x55:   exec_sub(loc,opcode);  break;
      case 0x56:   exec_mul(loc,opcode);  break;
      case 0x57:   exec_div(loc,opcode);  break;
      case 0x58:   exec_mod(loc,opcode);  break;
      case 0x59:   exec_call_2s(loc,opcode);  break;
      case 0x5A:   exec_call_2n(loc,opcode);  break;
      case 0x5B:   exec_set_colour(loc,opcode);  break;
      case 0x5C:   exec_throw(loc,opcode);  break;
      case 0x5D:   exec_illegal(loc,opcode);  break;
      case 0x5E:   exec_illegal(loc,opcode);  break;
      case 0x5F:   exec_illegal(loc,opcode);  break;
      case 0x60:   exec_illegal(loc,opcode);  break;
      case 0x61:   exec_je(loc,opcode);  break;
      case 0x62:   exec_jl(loc,opcode);  break;
      case 0x63:   exec_jg(loc,opcode);  break;
      case 0x64:   exec_dec_chk(loc,opcode);  break;
      case 0x65:   exec_inc_chk(loc,opcode);  break;
      case 0x66:   exec_jin(loc,opcode);  break;
      case 0x67:   exec_test(loc,opcode);  break;
      case 0x68:   exec_or(loc,opcode);  break;
      case 0x69:   exec_and(loc,opcode);  break;
      case 0x6A:   exec_test_attr(loc,opcode);  break;
      case 0x6B:   exec_set_attr(loc,opcode);  break;
      case 0x6C:   exec_clear_attr(loc,opcode);  break;
      case 0x6D:   exec_store(loc,opcode);  break;
      case 0x6E:   exec_insert_obj(loc,opcode);  break;
      case 0x6F:   exec_loadw(loc,opcode);  break;
      case 0x70:   exec_loadb(loc,opcode);  break;
      case 0x71:   exec_get_prop(loc,opcode);  break;
      case 0x72:   exec_get_prop_addr(loc,opcode);  break;
      case 0x73:   exec_get_next_prop(loc,opcode);  break;
      case 0x74:   exec_add(loc,opcode);  break;
      case 0x75:   exec_sub(loc,opcode);  break;
      case 0x76:   exec_mul(loc,opcode);  break;
      case 0x77:   exec_div(loc,opcode);  break;
      case 0x78:   exec_mod(loc,opcode);  break;
      case 0x79:   exec_call_2s(loc,opcode);  break;
      case 0x7A:   exec_call_2n(loc,opcode);  break;
      case 0x7B:   exec_set_colour(loc,opcode);  break;
      case 0x7C:   exec_throw(loc,opcode);  break;
      case 0x7D:   exec_illegal(loc,opcode);  break;
      case 0x7E:   exec_illegal(loc,opcode);  break;
      case 0x7F:   exec_illegal(loc,opcode);  break;
      case 0x80:   exec_jz(loc,opcode);  break;
      case 0x81:   exec_get_sibling(loc,opcode);  break;
      case 0x82:   exec_get_child(loc,opcode);  break;
      case 0x83:   exec_get_parent(loc,opcode);  break;
      case 0x84:   exec_get_prop_len(loc,opcode);  break;
      case 0x85:   exec_inc(loc,opcode);  break;
      case 0x86:   exec_dec(loc,opcode);  break;
      case 0x87:   exec_print_addr(loc,opcode);  break;
      case 0x88:   exec_call_1s(loc,opcode);  break;
      case 0x89:   exec_remove_obj(loc,opcode);  break;
      case 0x8A:   exec_print_obj(loc,opcode);  break;
      case 0x8B:   exec_ret(loc,opcode);  break;
      case 0x8C:   exec_jump(loc,opcode);  break;
      case 0x8D:   exec_print_paddr(loc,opcode);  break;
      case 0x8E:   exec_load(loc,opcode);  break;
      case 0x8F:   exec_not(loc,opcode);  break;
      case 0x90:   exec_jz(loc,opcode);  break;
      case 0x91:   exec_get_sibling(loc,opcode);  break;
      case 0x92:   exec_get_child(loc,opcode);  break;
      case 0x93:   exec_get_parent(loc,opcode);  break;
      case 0x94:   exec_get_prop_len(loc,opcode);  break;
      case 0x95:   exec_inc(loc,opcode);  break;
      case 0x96:   exec_dec(loc,opcode);  break;
      case 0x97:   exec_print_addr(loc,opcode);  break;
      case 0x98:   exec_call_1s(loc,opcode);  break;
      case 0x99:   exec_remove_obj(loc,opcode);  break;
      case 0x9A:   exec_print_obj(loc,opcode);  break;
      case 0x9B:   exec_ret(loc,opcode);  break;
      case 0x9C:   exec_jump(loc,opcode);  break;
      case 0x9D:   exec_print_paddr(loc,opcode);  break;
      case 0x9E:   exec_load(loc,opcode);  break;
      case 0x9F:   exec_not(loc,opcode);  break;
      case 0xA0:   exec_jz(loc,opcode);  break;
      case 0xA1:   exec_get_sibling(loc,opcode);  break;
      case 0xA2:   exec_get_child(loc,opcode);  break;
      case 0xA3:   exec_get_parent(loc,opcode);  break;
      case 0xA4:   exec_get_prop_len(loc,opcode);  break;
      case 0xA5:   exec_inc(loc,opcode);  break;
      case 0xA6:   exec_dec(loc,opcode);  break;
      case 0xA7:   exec_print_addr(loc,opcode);  break;
      case 0xA8:   exec_call_1s(loc,opcode);  break;
      case 0xA9:   exec_remove_obj(loc,opcode);  break;
      case 0xAA:   exec_print_obj(loc,opcode);  break;
      case 0xAB:   exec_ret(loc,opcode);  break;
      case 0xAC:   exec_jump(loc,opcode);  break;
      case 0xAD:   exec_print_paddr(loc,opcode);  break;
      case 0xAE:   exec_load(loc,opcode);  break;
      case 0xAF:   exec_not(loc,opcode);  break;
      case 0xB0:   exec_rtrue(loc,opcode);  break;
      case 0xB1:   exec_rfalse(loc,opcode);  break;
      case 0xB2:   exec_print(loc,opcode);  break;
      case 0xB3:   exec_print_ret(loc,opcode);  break;
      case 0xB4:   exec_nop(loc,opcode);  break;
      case 0xB5:   exec_save(loc,opcode);  break;
      case 0xB6:   exec_restore(loc,opcode);  break;
      case 0xB7:   exec_restart(loc,opcode);  break;
      case 0xB8:   exec_ret_popped(loc,opcode);  break;
      case 0xB9:   exec_pop(loc,opcode);  break;
      case 0xBA:   exec_quit(loc,opcode);  break;
      case 0xBB:   exec_new_line(loc,opcode);  break;
      case 0xBC:   exec_show_status(loc,opcode);  break;
      case 0xBD:   exec_verify(loc,opcode);  break;
      case 0xBE:   exec_extended(loc,opcode);  break;
      case 0xBF:   exec_piracy(loc,opcode);  break;
      case 0xC0:   exec_illegal(loc,opcode);  break;
      case 0xC1:   exec_je(loc,opcode);  break;
      case 0xC2:   exec_jl(loc,opcode);  break;
      case 0xC3:   exec_jg(loc,opcode);  break;
      case 0xC4:   exec_dec_chk(loc,opcode);  break;
      case 0xC5:   exec_inc_chk(loc,opcode);  break;
      case 0xC6:   exec_jin(loc,opcode);  break;
      case 0xC7:   exec_test(loc,opcode);  break;
      case 0xC8:   exec_or(loc,opcode);  break;
      case 0xC9:   exec_and(loc,opcode);  break;
      case 0xCA:   exec_test_attr(loc,opcode);  break;
      case 0xCB:   exec_set_attr(loc,opcode);  break;
      case 0xCC:   exec_clear_attr(loc,opcode);  break;
      case 0xCD:   exec_store(loc,opcode);  break;
      case 0xCE:   exec_insert_obj(loc,opcode);  break;
      case 0xCF:   exec_loadw(loc,opcode);  break;
      case 0xD0:   exec_loadb(loc,opcode);  break;
      case 0xD1:   exec_get_prop(loc,opcode);  break;
      case 0xD2:   exec_get_prop_addr(loc,opcode);  break;
      case 0xD3:   exec_get_next_prop(loc,opcode);  break;
      case 0xD4:   exec_add(loc,opcode);  break;
      case 0xD5:   exec_sub(loc,opcode);  break;
      case 0xD6:   exec_mul(loc,opcode);  break;
      case 0xD7:   exec_div(loc,opcode);  break;
      case 0xD8:   exec_mod(loc,opcode);  break;
      case 0xD9:   exec_call_2s(loc,opcode);  break;
      case 0xDA:   exec_call_2n(loc,opcode);  break;
      case 0xDB:   exec_set_colour(loc,opcode);  break;
      case 0xDC:   exec_throw(loc,opcode);  break;
      case 0xDD:   exec_illegal(loc,opcode);  break;
      case 0xDE:   exec_illegal(loc,opcode);  break;
      case 0xDF:   exec_illegal(loc,opcode);  break;
      case 0xE0:   exec_call(loc,opcode);  break;
      case 0xE1:   exec_storew(loc,opcode);  break;
      case 0xE2:   exec_storeb(loc,opcode);  break;
      case 0xE3:   exec_put_prop(loc,opcode);  break;
      case 0xE4:   exec_sread(loc,opcode);  break;
      case 0xE5:   exec_print_char(loc,opcode);  break;
      case 0xE6:   exec_print_num(loc,opcode);  break;
      case 0xE7:   exec_random(loc,opcode);  break;
      case 0xE8:   exec_push(loc,opcode);  break;
      case 0xE9:   exec_pull(loc,opcode);  break;
      case 0xEA:   exec_split_window(loc,opcode);  break;
      case 0xEB:   exec_set_window(loc,opcode);  break;
      case 0xEC:   exec_call_vs2(loc,opcode);  break;
      case 0xED:   exec_erase_window(loc,opcode);  break;
      case 0xEE:   exec_erase_line(loc,opcode);  break;
      case 0xEF:   exec_set_cursor(loc,opcode);  break;
      case 0xF0:   exec_get_cursor(loc,opcode);  break;
      case 0xF1:   exec_set_text_style(loc,opcode);  break;
      case 0xF2:   exec_buffer_mode(loc,opcode);  break;
      case 0xF3:   exec_output_stream(loc,opcode);  break;
      case 0xF4:   exec_input_stream(loc,opcode);  break;
      case 0xF5:   exec_sound_effect(loc,opcode);  break;
      case 0xF6:   exec_read_char(loc,opcode);  break;
      case 0xF7:   exec_scan_table(loc,opcode);  break;
      case 0xF8:   exec_not(loc,opcode);  break;
      case 0xF9:   exec_call_vn(loc,opcode);  break;
      case 0xFA:   exec_call_vn2(loc,opcode);  break;
      case 0xFB:   exec_tokenise(loc,opcode);  break;
      case 0xFC:   exec_encode_text(loc,opcode);  break;
      case 0xFD:   exec_copy_table(loc,opcode);  break;
      case 0xFE:   exec_print_table(loc,opcode);  break;
      case 0xFF:   exec_check_arg_count(loc,opcode);  break;
      default:  exec_invalid("EZMachine_exec.h"); break;
  }
