  // Don't edit this file, it is machine generated
  switch(topcode) {
      case 0x0:   dis_nop(loc,opcode);  break;  // nop
      case 0x1:   dis_ld(loc,opcode);  break;  // ld
      case 0x2:   dis_ld(loc,opcode);  break;  // ld
      case 0x3:   dis_inc(loc,opcode);  break;  // inc
      case 0x4:   dis_inc(loc,opcode);  break;  // inc
      case 0x5:   dis_dec(loc,opcode);  break;  // dec
      case 0x6:   dis_ld(loc,opcode);  break;  // ld
      case 0x7:   dis_rlca(loc,opcode);  break;  // rlca
      case 0x8:   dis_ex(loc,opcode);  break;  // ex
      case 0x9:   dis_add(loc,opcode);  break;  // add
      case 0x0A:   dis_ld(loc,opcode);  break;  // ld
      case 0x0B:   dis_dec(loc,opcode);  break;  // dec
      case 0x0C:   dis_inc(loc,opcode);  break;  // inc
      case 0x0D:   dis_dec(loc,opcode);  break;  // dec
      case 0x0E:   dis_ld(loc,opcode);  break;  // ld
      case 0x0F:   dis_rrca(loc,opcode);  break;  // rrca
      case 0x10:   dis_djnz(loc,opcode);  break;  // djnz
      case 0x11:   dis_ld(loc,opcode);  break;  // ld
      case 0x12:   dis_ld(loc,opcode);  break;  // ld
      case 0x13:   dis_inc(loc,opcode);  break;  // inc
      case 0x14:   dis_inc(loc,opcode);  break;  // inc
      case 0x15:   dis_dec(loc,opcode);  break;  // dec
      case 0x16:   dis_ld(loc,opcode);  break;  // ld
      case 0x17:   dis_rla(loc,opcode);  break;  // rla
      case 0x18:   dis_jr(loc,opcode);  break;  // jr
      case 0x19:   dis_add(loc,opcode);  break;  // add
      case 0x1A:   dis_ld(loc,opcode);  break;  // ld
      case 0x1B:   dis_dec(loc,opcode);  break;  // dec
      case 0x1C:   dis_inc(loc,opcode);  break;  // inc
      case 0x1D:   dis_dec(loc,opcode);  break;  // dec
      case 0x1E:   dis_ld(loc,opcode);  break;  // ld
      case 0x1F:   dis_rra(loc,opcode);  break;  // rra
      case 0x20:   dis_jr(loc,opcode);  break;  // jr
      case 0x21:   dis_ld(loc,opcode);  break;  // ld
      case 0x22:   dis_ld(loc,opcode);  break;  // ld
      case 0x23:   dis_inc(loc,opcode);  break;  // inc
      case 0x24:   dis_inc(loc,opcode);  break;  // inc
      case 0x25:   dis_dec(loc,opcode);  break;  // dec
      case 0x26:   dis_ld(loc,opcode);  break;  // ld
      case 0x27:   dis_daa(loc,opcode);  break;  // daa
      case 0x28:   dis_jr(loc,opcode);  break;  // jr
      case 0x29:   dis_add(loc,opcode);  break;  // add
      case 0x2A:   dis_ld(loc,opcode);  break;  // ld
      case 0x2B:   dis_dec(loc,opcode);  break;  // dec
      case 0x2C:   dis_inc(loc,opcode);  break;  // inc
      case 0x2D:   dis_dec(loc,opcode);  break;  // dec
      case 0x2E:   dis_ld(loc,opcode);  break;  // ld
      case 0x2F:   dis_cpl(loc,opcode);  break;  // cpl
      case 0x30:   dis_jr(loc,opcode);  break;  // jr
      case 0x31:   dis_ld(loc,opcode);  break;  // ld
      case 0x32:   dis_ld(loc,opcode);  break;  // ld
      case 0x33:   dis_illegal(loc,opcode);  break;  // illegal
      case 0x34:   dis_inc(loc,opcode);  break;  // inc
      case 0x35:   dis_dec(loc,opcode);  break;  // dec
      case 0x36:   dis_ld(loc,opcode);  break;  // ld
      case 0x37:   dis_scf(loc,opcode);  break;  // scf
      case 0x38:   dis_jr(loc,opcode);  break;  // jr
      case 0x39:   dis_add(loc,opcode);  break;  // add
      case 0x3A:   dis_ld(loc,opcode);  break;  // ld
      case 0x3B:   dis_dec(loc,opcode);  break;  // dec
      case 0x3C:   dis_inc(loc,opcode);  break;  // inc
      case 0x3D:   dis_dec(loc,opcode);  break;  // dec
      case 0x3E:   dis_ld(loc,opcode);  break;  // ld
      case 0x3F:   dis_ccf(loc,opcode);  break;  // ccf
      case 0x40:   dis_ld(loc,opcode);  break;  // ld
      case 0x41:   dis_ld(loc,opcode);  break;  // ld
      case 0x42:   dis_ld(loc,opcode);  break;  // ld
      case 0x43:   dis_ld(loc,opcode);  break;  // ld
      case 0x44:   dis_ld(loc,opcode);  break;  // ld
      case 0x45:   dis_ld(loc,opcode);  break;  // ld
      case 0x46:   dis_ld(loc,opcode);  break;  // ld
      case 0x47:   dis_ld(loc,opcode);  break;  // ld
      case 0x48:   dis_ld(loc,opcode);  break;  // ld
      case 0x49:   dis_ld(loc,opcode);  break;  // ld
      case 0x4A:   dis_ld(loc,opcode);  break;  // ld
      case 0x4B:   dis_ld(loc,opcode);  break;  // ld
      case 0x4C:   dis_ld(loc,opcode);  break;  // ld
      case 0x4D:   dis_ld(loc,opcode);  break;  // ld
      case 0x4E:   dis_ld(loc,opcode);  break;  // ld
      case 0x4F:   dis_ld(loc,opcode);  break;  // ld
      case 0x50:   dis_ld(loc,opcode);  break;  // ld
      case 0x51:   dis_ld(loc,opcode);  break;  // ld
      case 0x52:   dis_ld(loc,opcode);  break;  // ld
      case 0x53:   dis_ld(loc,opcode);  break;  // ld
      case 0x54:   dis_ld(loc,opcode);  break;  // ld
      case 0x55:   dis_ld(loc,opcode);  break;  // ld
      case 0x56:   dis_ld(loc,opcode);  break;  // ld
      case 0x57:   dis_ld(loc,opcode);  break;  // ld
      case 0x58:   dis_ld(loc,opcode);  break;  // ld
      case 0x59:   dis_ld(loc,opcode);  break;  // ld
      case 0x5A:   dis_ld(loc,opcode);  break;  // ld
      case 0x5B:   dis_ld(loc,opcode);  break;  // ld
      case 0x5C:   dis_ld(loc,opcode);  break;  // ld
      case 0x5D:   dis_ld(loc,opcode);  break;  // ld
      case 0x5E:   dis_ld(loc,opcode);  break;  // ld
      case 0x5F:   dis_ld(loc,opcode);  break;  // ld
      case 0x60:   dis_ld(loc,opcode);  break;  // ld
      case 0x61:   dis_ld(loc,opcode);  break;  // ld
      case 0x62:   dis_ld(loc,opcode);  break;  // ld
      case 0x63:   dis_illegal(loc,opcode);  break;  // illegal
      case 0x64:   dis_illegal(loc,opcode);  break;  // illegal
      case 0x65:   dis_ld(loc,opcode);  break;  // ld
      case 0x66:   dis_ld(loc,opcode);  break;  // ld
      case 0x67:   dis_ld(loc,opcode);  break;  // ld
      case 0x68:   dis_ld(loc,opcode);  break;  // ld
      case 0x69:   dis_ld(loc,opcode);  break;  // ld
      case 0x6A:   dis_ld(loc,opcode);  break;  // ld
      case 0x6B:   dis_ld(loc,opcode);  break;  // ld
      case 0x6C:   dis_ld(loc,opcode);  break;  // ld
      case 0x6D:   dis_ld(loc,opcode);  break;  // ld
      case 0x6E:   dis_ld(loc,opcode);  break;  // ld
      case 0x6F:   dis_ld(loc,opcode);  break;  // ld
      case 0x70:   dis_ld(loc,opcode);  break;  // ld
      case 0x71:   dis_ld(loc,opcode);  break;  // ld
      case 0x72:   dis_ld(loc,opcode);  break;  // ld
      case 0x73:   dis_ld(loc,opcode);  break;  // ld
      case 0x74:   dis_ld(loc,opcode);  break;  // ld
      case 0x75:   dis_ld(loc,opcode);  break;  // ld
      case 0x76:   dis_halt(loc,opcode);  break;  // halt
      case 0x77:   dis_ld(loc,opcode);  break;  // ld
      case 0x78:   dis_ld(loc,opcode);  break;  // ld
      case 0x79:   dis_ld(loc,opcode);  break;  // ld
      case 0x7A:   dis_ld(loc,opcode);  break;  // ld
      case 0x7B:   dis_ld(loc,opcode);  break;  // ld
      case 0x7C:   dis_ld(loc,opcode);  break;  // ld
      case 0x7D:   dis_ld(loc,opcode);  break;  // ld
      case 0x7E:   dis_ld(loc,opcode);  break;  // ld
      case 0x7F:   dis_ld(loc,opcode);  break;  // ld
      case 0x80:   dis_add(loc,opcode);  break;  // add
      case 0x81:   dis_add(loc,opcode);  break;  // add
      case 0x82:   dis_add(loc,opcode);  break;  // add
      case 0x83:   dis_add(loc,opcode);  break;  // add
      case 0x84:   dis_add(loc,opcode);  break;  // add
      case 0x85:   dis_add(loc,opcode);  break;  // add
      case 0x86:   dis_add(loc,opcode);  break;  // add
      case 0x87:   dis_add(loc,opcode);  break;  // add
      case 0x88:   dis_adc(loc,opcode);  break;  // adc
      case 0x89:   dis_adc(loc,opcode);  break;  // adc
      case 0x8A:   dis_adc(loc,opcode);  break;  // adc
      case 0x8B:   dis_adc(loc,opcode);  break;  // adc
      case 0x8C:   dis_adc(loc,opcode);  break;  // adc
      case 0x8D:   dis_adc(loc,opcode);  break;  // adc
      case 0x8E:   dis_adc(loc,opcode);  break;  // adc
      case 0x8F:   dis_adc(loc,opcode);  break;  // adc
      case 0x90:   dis_sub(loc,opcode);  break;  // sub
      case 0x91:   dis_sub(loc,opcode);  break;  // sub
      case 0x92:   dis_sub(loc,opcode);  break;  // sub
      case 0x93:   dis_illegal(loc,opcode);  break;  // illegal
      case 0x94:   dis_sub(loc,opcode);  break;  // sub
      case 0x95:   dis_sub(loc,opcode);  break;  // sub
      case 0x96:   dis_sub(loc,opcode);  break;  // sub
      case 0x97:   dis_sub(loc,opcode);  break;  // sub
      case 0x98:   dis_sbc(loc,opcode);  break;  // sbc
      case 0x99:   dis_sbc(loc,opcode);  break;  // sbc
      case 0x9A:   dis_sbc(loc,opcode);  break;  // sbc
      case 0x9B:   dis_sbc(loc,opcode);  break;  // sbc
      case 0x9C:   dis_sbc(loc,opcode);  break;  // sbc
      case 0x9D:   dis_sbc(loc,opcode);  break;  // sbc
      case 0x9E:   dis_sbc(loc,opcode);  break;  // sbc
      case 0x9F:   dis_sbc(loc,opcode);  break;  // sbc
      case 0xA0:   dis_and(loc,opcode);  break;  // and
      case 0xA1:   dis_and(loc,opcode);  break;  // and
      case 0xA2:   dis_and(loc,opcode);  break;  // and
      case 0xA3:   dis_and(loc,opcode);  break;  // and
      case 0xA4:   dis_and(loc,opcode);  break;  // and
      case 0xA5:   dis_and(loc,opcode);  break;  // and
      case 0xA6:   dis_and(loc,opcode);  break;  // and
      case 0xA7:   dis_and(loc,opcode);  break;  // and
      case 0xA8:   dis_xor(loc,opcode);  break;  // xor
      case 0xA9:   dis_xor(loc,opcode);  break;  // xor
      case 0xAA:   dis_xor(loc,opcode);  break;  // xor
      case 0xAB:   dis_illegal(loc,opcode);  break;  // illegal
      case 0xAC:   dis_illegal(loc,opcode);  break;  // illegal
      case 0xAD:   dis_xor(loc,opcode);  break;  // xor
      case 0xAE:   dis_xor(loc,opcode);  break;  // xor
      case 0xAF:   dis_xor(loc,opcode);  break;  // xor
      case 0xB0:   dis_or(loc,opcode);  break;  // or
      case 0xB1:   dis_or(loc,opcode);  break;  // or
      case 0xB2:   dis_or(loc,opcode);  break;  // or
      case 0xB3:   dis_or(loc,opcode);  break;  // or
      case 0xB4:   dis_or(loc,opcode);  break;  // or
      case 0xB5:   dis_or(loc,opcode);  break;  // or
      case 0xB6:   dis_or(loc,opcode);  break;  // or
      case 0xB7:   dis_or(loc,opcode);  break;  // or
      case 0xB8:   dis_cp(loc,opcode);  break;  // cp
      case 0xB9:   dis_cp(loc,opcode);  break;  // cp
      case 0xBA:   dis_cp(loc,opcode);  break;  // cp
      case 0xBB:   dis_illegal(loc,opcode);  break;  // illegal
      case 0xBC:   dis_cp(loc,opcode);  break;  // cp
      case 0xBD:   dis_cp(loc,opcode);  break;  // cp
      case 0xBE:   dis_cp(loc,opcode);  break;  // cp
      case 0xBF:   dis_cp(loc,opcode);  break;  // cp
      case 0xC0:   dis_ret(loc,opcode);  break;  // ret
      case 0xC1:   dis_pop(loc,opcode);  break;  // pop
      case 0xC2:   dis_jp(loc,opcode);  break;  // jp
      case 0xC3:   dis_jp(loc,opcode);  break;  // jp
      case 0xC4:   dis_call(loc,opcode);  break;  // call
      case 0xC5:   dis_push(loc,opcode);  break;  // push
      case 0xC6:   dis_add(loc,opcode);  break;  // add
      case 0xC7:   dis_rst(loc,opcode);  break;  // rst
      case 0xC8:   dis_ret(loc,opcode);  break;  // ret
      case 0xC9:   dis_ret(loc,opcode);  break;  // ret
      case 0xCA:   dis_jp(loc,opcode);  break;  // jp
      case 0xCB:   dis_special(loc,opcode);  break;  // special
      case 0xCC:   dis_call(loc,opcode);  break;  // call
      case 0xCD:   dis_call(loc,opcode);  break;  // call
      case 0xCE:   dis_adc(loc,opcode);  break;  // adc
      case 0xCF:   dis_rst(loc,opcode);  break;  // rst
      case 0xD0:   dis_ret(loc,opcode);  break;  // ret
      case 0xD1:   dis_pop(loc,opcode);  break;  // pop
      case 0xD2:   dis_jp(loc,opcode);  break;  // jp
      case 0xD3:   dis_out(loc,opcode);  break;  // out
      case 0xD4:   dis_call(loc,opcode);  break;  // call
      case 0xD5:   dis_push(loc,opcode);  break;  // push
      case 0xD6:   dis_sub(loc,opcode);  break;  // sub
      case 0xD7:   dis_rst(loc,opcode);  break;  // rst
      case 0xD8:   dis_ret(loc,opcode);  break;  // ret
      case 0xD9:   dis_exx(loc,opcode);  break;  // exx
      case 0xDA:   dis_jp(loc,opcode);  break;  // jp
      case 0xDB:   dis_in(loc,opcode);  break;  // in
      case 0xDC:   dis_call(loc,opcode);  break;  // call
      case 0xDD:   dis_special(loc,opcode);  break;  // special
      case 0xDE:   dis_sbc(loc,opcode);  break;  // sbc
      case 0xDF:   dis_rst(loc,opcode);  break;  // rst
      case 0xE0:   dis_ret(loc,opcode);  break;  // ret
      case 0xE1:   dis_pop(loc,opcode);  break;  // pop
      case 0xE2:   dis_illegal(loc,opcode);  break;  // illegal
      case 0xE3:   dis_ex(loc,opcode);  break;  // ex
      case 0xE4:   dis_call(loc,opcode);  break;  // call
      case 0xE5:   dis_push(loc,opcode);  break;  // push
      case 0xE6:   dis_and(loc,opcode);  break;  // and
      case 0xE7:   dis_rst(loc,opcode);  break;  // rst
      case 0xE8:   dis_ret(loc,opcode);  break;  // ret
      case 0xE9:   dis_jp(loc,opcode);  break;  // jp
      case 0xEA:   dis_jp(loc,opcode);  break;  // jp
      case 0xEB:   dis_ex(loc,opcode);  break;  // ex
      case 0xEC:   dis_illegal(loc,opcode);  break;  // illegal
      case 0xED:   dis_special(loc,opcode);  break;  // special
      case 0xEE:   dis_xor(loc,opcode);  break;  // xor
      case 0xEF:   dis_rst(loc,opcode);  break;  // rst
      case 0xF0:   dis_ret(loc,opcode);  break;  // ret
      case 0xF1:   dis_pop(loc,opcode);  break;  // pop
      case 0xF2:   dis_jp(loc,opcode);  break;  // jp
      case 0xF3:   dis_di(loc,opcode);  break;  // di
      case 0xF4:   dis_call(loc,opcode);  break;  // call
      case 0xF5:   dis_push(loc,opcode);  break;  // push
      case 0xF6:   dis_or(loc,opcode);  break;  // or
      case 0xF7:   dis_rst(loc,opcode);  break;  // rst
      case 0xF8:   dis_ret(loc,opcode);  break;  // ret
      case 0xF9:   dis_ld(loc,opcode);  break;  // ld
      case 0xFA:   dis_jp(loc,opcode);  break;  // jp
      case 0xFB:   dis_ei(loc,opcode);  break;  // ei
      case 0xFC:   dis_call(loc,opcode);  break;  // call
      case 0xFD:   dis_special(loc,opcode);  break;  // special
      case 0xFE:   dis_cp(loc,opcode);  break;  // cp
      case 0xFF:   dis_rst(loc,opcode);  break;  // rst
      default:  dis_invalid("Ez80_dis.h"); break;
  }
