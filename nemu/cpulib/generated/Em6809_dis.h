  // Don't edit this file, it is machine generated
  switch(topcode) {
      case 0x0:   dis_neg(loc,opcode);  break;  // neg
      case 0x1:   dis_illegal(loc,opcode);  break;  // illegal
      case 0x2:   dis_illegal(loc,opcode);  break;  // illegal
      case 0x3:   dis_com(loc,opcode);  break;  // com
      case 0x4:   dis_lsr(loc,opcode);  break;  // lsr
      case 0x5:   dis_illegal(loc,opcode);  break;  // illegal
      case 0x6:   dis_ror(loc,opcode);  break;  // ror
      case 0x7:   dis_asr(loc,opcode);  break;  // asr
      case 0x8:   dis_asl(loc,opcode);  break;  // asl
      case 0x9:   dis_rol(loc,opcode);  break;  // rol
      case 0x0A:   dis_dec(loc,opcode);  break;  // dec
      case 0x0B:   dis_illegal(loc,opcode);  break;  // illegal
      case 0x0C:   dis_inc(loc,opcode);  break;  // inc
      case 0x0D:   dis_tst(loc,opcode);  break;  // tst
      case 0x0E:   dis_jmp(loc,opcode);  break;  // jmp
      case 0x0F:   dis_clr(loc,opcode);  break;  // clr
      case 0x10:   dis_special(loc,opcode);  break;  // special
      case 0x11:   dis_special(loc,opcode);  break;  // special
      case 0x12:   dis_nop(loc,opcode);  break;  // nop
      case 0x13:   dis_unknown(loc,opcode);  break;  // unknown
      case 0x14:   dis_illegal(loc,opcode);  break;  // illegal
      case 0x15:   dis_illegal(loc,opcode);  break;  // illegal
      case 0x16:   dis_lbra(loc,opcode);  break;  // lbra
      case 0x17:   dis_lbsr(loc,opcode);  break;  // lbsr
      case 0x18:   dis_illegal(loc,opcode);  break;  // illegal
      case 0x19:   dis_daa(loc,opcode);  break;  // daa
      case 0x1A:   dis_orcc(loc,opcode);  break;  // orcc
      case 0x1B:   dis_unknown(loc,opcode);  break;  // unknown
      case 0x1C:   dis_andcc(loc,opcode);  break;  // andcc
      case 0x1D:   dis_sex(loc,opcode);  break;  // sex
      case 0x1E:   dis_exg(loc,opcode);  break;  // exg
      case 0x1F:   dis_tfr(loc,opcode);  break;  // tfr
      case 0x20:   dis_bra(loc,opcode);  break;  // bra
      case 0x21:   dis_brn(loc,opcode);  break;  // brn
      case 0x22:   dis_bhi(loc,opcode);  break;  // bhi
      case 0x23:   dis_bls(loc,opcode);  break;  // bls
      case 0x24:   dis_bcc(loc,opcode);  break;  // bcc
      case 0x25:   dis_bcs(loc,opcode);  break;  // bcs
      case 0x26:   dis_bne(loc,opcode);  break;  // bne
      case 0x27:   dis_beq(loc,opcode);  break;  // beq
      case 0x28:   dis_bvc(loc,opcode);  break;  // bvc
      case 0x29:   dis_bvs(loc,opcode);  break;  // bvs
      case 0x2A:   dis_bpl(loc,opcode);  break;  // bpl
      case 0x2B:   dis_bmi(loc,opcode);  break;  // bmi
      case 0x2C:   dis_bge(loc,opcode);  break;  // bge
      case 0x2D:   dis_blt(loc,opcode);  break;  // blt
      case 0x2E:   dis_bgt(loc,opcode);  break;  // bgt
      case 0x2F:   dis_ble(loc,opcode);  break;  // ble
      case 0x30:   dis_leax(loc,opcode);  break;  // leax
      case 0x31:   dis_leay(loc,opcode);  break;  // leay
      case 0x32:   dis_leas(loc,opcode);  break;  // leas
      case 0x33:   dis_leau(loc,opcode);  break;  // leau
      case 0x34:   dis_pshs(loc,opcode);  break;  // pshs
      case 0x35:   dis_puls(loc,opcode);  break;  // puls
      case 0x36:   dis_pshu(loc,opcode);  break;  // pshu
      case 0x37:   dis_pulu(loc,opcode);  break;  // pulu
      case 0x38:   dis_illegal(loc,opcode);  break;  // illegal
      case 0x39:   dis_rts(loc,opcode);  break;  // rts
      case 0x3A:   dis_abx(loc,opcode);  break;  // abx
      case 0x3B:   dis_rti(loc,opcode);  break;  // rti
      case 0x3C:   dis_cwai(loc,opcode);  break;  // cwai
      case 0x3D:   dis_mul(loc,opcode);  break;  // mul
      case 0x3E:   dis_illegal(loc,opcode);  break;  // illegal
      case 0x3F:   dis_swi(loc,opcode);  break;  // swi
      case 0x40:   dis_nega(loc,opcode);  break;  // nega
      case 0x41:   dis_unknown(loc,opcode);  break;  // unknown
      case 0x42:   dis_unknown(loc,opcode);  break;  // unknown
      case 0x43:   dis_coma(loc,opcode);  break;  // coma
      case 0x44:   dis_lsra(loc,opcode);  break;  // lsra
      case 0x45:   dis_unknown(loc,opcode);  break;  // unknown
      case 0x46:   dis_rora(loc,opcode);  break;  // rora
      case 0x47:   dis_asra(loc,opcode);  break;  // asra
      case 0x48:   dis_asla(loc,opcode);  break;  // asla
      case 0x49:   dis_rola(loc,opcode);  break;  // rola
      case 0x4A:   dis_deca(loc,opcode);  break;  // deca
      case 0x4B:   dis_illegal(loc,opcode);  break;  // illegal
      case 0x4C:   dis_inca(loc,opcode);  break;  // inca
      case 0x4D:   dis_tsta(loc,opcode);  break;  // tsta
      case 0x4E:   dis_unknown(loc,opcode);  break;  // unknown
      case 0x4F:   dis_clra(loc,opcode);  break;  // clra
      case 0x50:   dis_negb(loc,opcode);  break;  // negb
      case 0x51:   dis_unknown(loc,opcode);  break;  // unknown
      case 0x52:   dis_unknown(loc,opcode);  break;  // unknown
      case 0x53:   dis_comb(loc,opcode);  break;  // comb
      case 0x54:   dis_lsrb(loc,opcode);  break;  // lsrb
      case 0x55:   dis_unknown(loc,opcode);  break;  // unknown
      case 0x56:   dis_rorb(loc,opcode);  break;  // rorb
      case 0x57:   dis_asrb(loc,opcode);  break;  // asrb
      case 0x58:   dis_aslb(loc,opcode);  break;  // aslb
      case 0x59:   dis_rolb(loc,opcode);  break;  // rolb
      case 0x5A:   dis_decb(loc,opcode);  break;  // decb
      case 0x5B:   dis_illegal(loc,opcode);  break;  // illegal
      case 0x5C:   dis_incb(loc,opcode);  break;  // incb
      case 0x5D:   dis_tstb(loc,opcode);  break;  // tstb
      case 0x5E:   dis_illegal(loc,opcode);  break;  // illegal
      case 0x5F:   dis_clrb(loc,opcode);  break;  // clrb
      case 0x60:   dis_neg(loc,opcode);  break;  // neg
      case 0x61:   dis_illegal(loc,opcode);  break;  // illegal
      case 0x62:   dis_unknown(loc,opcode);  break;  // unknown
      case 0x63:   dis_com(loc,opcode);  break;  // com
      case 0x64:   dis_lsr(loc,opcode);  break;  // lsr
      case 0x65:   dis_unknown(loc,opcode);  break;  // unknown
      case 0x66:   dis_ror(loc,opcode);  break;  // ror
      case 0x67:   dis_asr(loc,opcode);  break;  // asr
      case 0x68:   dis_asl(loc,opcode);  break;  // asl
      case 0x69:   dis_rol(loc,opcode);  break;  // rol
      case 0x6A:   dis_dec(loc,opcode);  break;  // dec
      case 0x6B:   dis_illegal(loc,opcode);  break;  // illegal
      case 0x6C:   dis_inc(loc,opcode);  break;  // inc
      case 0x6D:   dis_tst(loc,opcode);  break;  // tst
      case 0x6E:   dis_jmp(loc,opcode);  break;  // jmp
      case 0x6F:   dis_clr(loc,opcode);  break;  // clr
      case 0x70:   dis_neg(loc,opcode);  break;  // neg
      case 0x71:   dis_unknown(loc,opcode);  break;  // unknown
      case 0x72:   dis_unknown(loc,opcode);  break;  // unknown
      case 0x73:   dis_com(loc,opcode);  break;  // com
      case 0x74:   dis_lsr(loc,opcode);  break;  // lsr
      case 0x75:   dis_unknown(loc,opcode);  break;  // unknown
      case 0x76:   dis_ror(loc,opcode);  break;  // ror
      case 0x77:   dis_asr(loc,opcode);  break;  // asr
      case 0x78:   dis_asl(loc,opcode);  break;  // asl
      case 0x79:   dis_rol(loc,opcode);  break;  // rol
      case 0x7A:   dis_dec(loc,opcode);  break;  // dec
      case 0x7B:   dis_illegal(loc,opcode);  break;  // illegal
      case 0x7C:   dis_inc(loc,opcode);  break;  // inc
      case 0x7D:   dis_tst(loc,opcode);  break;  // tst
      case 0x7E:   dis_jmp(loc,opcode);  break;  // jmp
      case 0x7F:   dis_clr(loc,opcode);  break;  // clr
      case 0x80:   dis_suba(loc,opcode);  break;  // suba
      case 0x81:   dis_cmpa(loc,opcode);  break;  // cmpa
      case 0x82:   dis_sbca(loc,opcode);  break;  // sbca
      case 0x83:   dis_subd(loc,opcode);  break;  // subd
      case 0x84:   dis_anda(loc,opcode);  break;  // anda
      case 0x85:   dis_bita(loc,opcode);  break;  // bita
      case 0x86:   dis_lda(loc,opcode);  break;  // lda
      case 0x87:   dis_illegal(loc,opcode);  break;  // illegal
      case 0x88:   dis_eora(loc,opcode);  break;  // eora
      case 0x89:   dis_adca(loc,opcode);  break;  // adca
      case 0x8A:   dis_ora(loc,opcode);  break;  // ora
      case 0x8B:   dis_adda(loc,opcode);  break;  // adda
      case 0x8C:   dis_cmpx(loc,opcode);  break;  // cmpx
      case 0x8D:   dis_bsr(loc,opcode);  break;  // bsr
      case 0x8E:   dis_ldx(loc,opcode);  break;  // ldx
      case 0x8F:   dis_illegal(loc,opcode);  break;  // illegal
      case 0x90:   dis_suba(loc,opcode);  break;  // suba
      case 0x91:   dis_cmpa(loc,opcode);  break;  // cmpa
      case 0x92:   dis_sbca(loc,opcode);  break;  // sbca
      case 0x93:   dis_subd(loc,opcode);  break;  // subd
      case 0x94:   dis_anda(loc,opcode);  break;  // anda
      case 0x95:   dis_bita(loc,opcode);  break;  // bita
      case 0x96:   dis_lda(loc,opcode);  break;  // lda
      case 0x97:   dis_sta(loc,opcode);  break;  // sta
      case 0x98:   dis_eora(loc,opcode);  break;  // eora
      case 0x99:   dis_adca(loc,opcode);  break;  // adca
      case 0x9A:   dis_ora(loc,opcode);  break;  // ora
      case 0x9B:   dis_adda(loc,opcode);  break;  // adda
      case 0x9C:   dis_cpx(loc,opcode);  break;  // cpx
      case 0x9D:   dis_jsr(loc,opcode);  break;  // jsr
      case 0x9E:   dis_ldx(loc,opcode);  break;  // ldx
      case 0x9F:   dis_stx(loc,opcode);  break;  // stx
      case 0xA0:   dis_suba(loc,opcode);  break;  // suba
      case 0xA1:   dis_cmpa(loc,opcode);  break;  // cmpa
      case 0xA2:   dis_adda(loc,opcode);  break;  // adda
      case 0xA3:   dis_subd(loc,opcode);  break;  // subd
      case 0xA4:   dis_anda(loc,opcode);  break;  // anda
      case 0xA5:   dis_bita(loc,opcode);  break;  // bita
      case 0xA6:   dis_lda(loc,opcode);  break;  // lda
      case 0xA7:   dis_sta(loc,opcode);  break;  // sta
      case 0xA8:   dis_eora(loc,opcode);  break;  // eora
      case 0xA9:   dis_adca(loc,opcode);  break;  // adca
      case 0xAA:   dis_ora(loc,opcode);  break;  // ora
      case 0xAB:   dis_adda(loc,opcode);  break;  // adda
      case 0xAC:   dis_cpx(loc,opcode);  break;  // cpx
      case 0xAD:   dis_jsr(loc,opcode);  break;  // jsr
      case 0xAE:   dis_ldx(loc,opcode);  break;  // ldx
      case 0xAF:   dis_stx(loc,opcode);  break;  // stx
      case 0xB0:   dis_suba(loc,opcode);  break;  // suba
      case 0xB1:   dis_cmpa(loc,opcode);  break;  // cmpa
      case 0xB2:   dis_sbca(loc,opcode);  break;  // sbca
      case 0xB3:   dis_subd(loc,opcode);  break;  // subd
      case 0xB4:   dis_anda(loc,opcode);  break;  // anda
      case 0xB5:   dis_bita(loc,opcode);  break;  // bita
      case 0xB6:   dis_lda(loc,opcode);  break;  // lda
      case 0xB7:   dis_sta(loc,opcode);  break;  // sta
      case 0xB8:   dis_eora(loc,opcode);  break;  // eora
      case 0xB9:   dis_adca(loc,opcode);  break;  // adca
      case 0xBA:   dis_ora(loc,opcode);  break;  // ora
      case 0xBB:   dis_adda(loc,opcode);  break;  // adda
      case 0xBC:   dis_cpx(loc,opcode);  break;  // cpx
      case 0xBD:   dis_jsr(loc,opcode);  break;  // jsr
      case 0xBE:   dis_ldx(loc,opcode);  break;  // ldx
      case 0xBF:   dis_stx(loc,opcode);  break;  // stx
      case 0xC0:   dis_subb(loc,opcode);  break;  // subb
      case 0xC1:   dis_cmpb(loc,opcode);  break;  // cmpb
      case 0xC2:   dis_sbcb(loc,opcode);  break;  // sbcb
      case 0xC3:   dis_addd(loc,opcode);  break;  // addd
      case 0xC4:   dis_andb(loc,opcode);  break;  // andb
      case 0xC5:   dis_bitb(loc,opcode);  break;  // bitb
      case 0xC6:   dis_ldb(loc,opcode);  break;  // ldb
      case 0xC7:   dis_illegal(loc,opcode);  break;  // illegal
      case 0xC8:   dis_eorb(loc,opcode);  break;  // eorb
      case 0xC9:   dis_adcb(loc,opcode);  break;  // adcb
      case 0xCA:   dis_orb(loc,opcode);  break;  // orb
      case 0xCB:   dis_addb(loc,opcode);  break;  // addb
      case 0xCC:   dis_ldd(loc,opcode);  break;  // ldd
      case 0xCD:   dis_illegal(loc,opcode);  break;  // illegal
      case 0xCE:   dis_ldu(loc,opcode);  break;  // ldu
      case 0xCF:   dis_illegal(loc,opcode);  break;  // illegal
      case 0xD0:   dis_subb(loc,opcode);  break;  // subb
      case 0xD1:   dis_cmpb(loc,opcode);  break;  // cmpb
      case 0xD2:   dis_sbcb(loc,opcode);  break;  // sbcb
      case 0xD3:   dis_addd(loc,opcode);  break;  // addd
      case 0xD4:   dis_andb(loc,opcode);  break;  // andb
      case 0xD5:   dis_bitb(loc,opcode);  break;  // bitb
      case 0xD6:   dis_ldb(loc,opcode);  break;  // ldb
      case 0xD7:   dis_stb(loc,opcode);  break;  // stb
      case 0xD8:   dis_eorb(loc,opcode);  break;  // eorb
      case 0xD9:   dis_adcb(loc,opcode);  break;  // adcb
      case 0xDA:   dis_orb(loc,opcode);  break;  // orb
      case 0xDB:   dis_addb(loc,opcode);  break;  // addb
      case 0xDC:   dis_ldd(loc,opcode);  break;  // ldd
      case 0xDD:   dis_std(loc,opcode);  break;  // std
      case 0xDE:   dis_ldu(loc,opcode);  break;  // ldu
      case 0xDF:   dis_stu(loc,opcode);  break;  // stu
      case 0xE0:   dis_subb(loc,opcode);  break;  // subb
      case 0xE1:   dis_cmpb(loc,opcode);  break;  // cmpb
      case 0xE2:   dis_sbcb(loc,opcode);  break;  // sbcb
      case 0xE3:   dis_addd(loc,opcode);  break;  // addd
      case 0xE4:   dis_andb(loc,opcode);  break;  // andb
      case 0xE5:   dis_bitb(loc,opcode);  break;  // bitb
      case 0xE6:   dis_ldb(loc,opcode);  break;  // ldb
      case 0xE7:   dis_stb(loc,opcode);  break;  // stb
      case 0xE8:   dis_eorb(loc,opcode);  break;  // eorb
      case 0xE9:   dis_adcb(loc,opcode);  break;  // adcb
      case 0xEA:   dis_orb(loc,opcode);  break;  // orb
      case 0xEB:   dis_addb(loc,opcode);  break;  // addb
      case 0xEC:   dis_ldd(loc,opcode);  break;  // ldd
      case 0xED:   dis_std(loc,opcode);  break;  // std
      case 0xEE:   dis_ldu(loc,opcode);  break;  // ldu
      case 0xEF:   dis_stu(loc,opcode);  break;  // stu
      case 0xF0:   dis_subb(loc,opcode);  break;  // subb
      case 0xF1:   dis_cmpb(loc,opcode);  break;  // cmpb
      case 0xF2:   dis_sbcb(loc,opcode);  break;  // sbcb
      case 0xF3:   dis_addd(loc,opcode);  break;  // addd
      case 0xF4:   dis_andb(loc,opcode);  break;  // andb
      case 0xF5:   dis_bitb(loc,opcode);  break;  // bitb
      case 0xF6:   dis_ldb(loc,opcode);  break;  // ldb
      case 0xF7:   dis_stb(loc,opcode);  break;  // stb
      case 0xF8:   dis_eorb(loc,opcode);  break;  // eorb
      case 0xF9:   dis_adcb(loc,opcode);  break;  // adcb
      case 0xFA:   dis_orb(loc,opcode);  break;  // orb
      case 0xFB:   dis_addb(loc,opcode);  break;  // addb
      case 0xFC:   dis_ldd(loc,opcode);  break;  // ldd
      case 0xFD:   dis_std(loc,opcode);  break;  // std
      case 0xFE:   dis_ldu(loc,opcode);  break;  // ldu
      case 0xFF:   dis_stu(loc,opcode);  break;  // stu
      default:  dis_invalid("Em6809_dis.h"); break;
  }
